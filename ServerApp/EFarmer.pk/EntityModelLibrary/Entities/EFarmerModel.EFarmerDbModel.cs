//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2/6/2020 9:33:50 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using EFarmerPkModelLibrary.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Threading.Tasks;

namespace EFarmerPkModelLibrary.Context
{

    public partial class EFarmerDbModel : DbContext
    {
        string connectionString;
        public EFarmerDbModel() :
            base()
        {
            OnCreated();
        }
        public EFarmerDbModel(DbContextOptions<EFarmerDbModel> options) :
            base(options)
        {
            try
            {
                connectionString = options.GetExtension<SqlServerOptionsExtension>().ConnectionString;
            }
            catch (Exception)
            {
                connectionString = "";

            }
            OnCreated();
        }
        public EFarmerDbModel(string connectionString) :
            base(GetOptions(connectionString))
        {
            this.connectionString = connectionString;
            OnCreated();
        }
        //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //{
        //    optionsBuilder.UseLazyLoadingProxies()
        //        .UseSqlServer(connectionString);
        //    base.OnConfiguring(optionsBuilder);
        //}
        private static DbContextOptions GetOptions(string connectionString)
        {
            return SqlServerDbContextOptionsExtensions.UseSqlServer(new DbContextOptionsBuilder(), connectionString).Options;
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseLazyLoadingProxies()
            .UseSqlServer(connectionString);
            //optionsBuilder.UseSqlServer(connectionString,
            //    x => x.MigrationsAssembly("EFarmerPkModelLibrary.Migrations"));

            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        //private static string GetConnectionString(string connectionStringName)
        //{
        //    var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
        //    var configuration = configurationBuilder.Build();
        //    return configuration.GetConnectionString(connectionStringName);
        //}

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        internal virtual DbSet<ADVERTISEMENT> ADVERTISEMENTs
        {
            get;
            set;
        }

        internal virtual DbSet<AGROITEM> AGROITEMs
        {
            get;
            set;
        }

        internal virtual DbSet<BUYERADDSDIFFERENTADSTOFAV> BUYERADDSDIFFERENTADSTOFAVs
        {
            get;
            set;
        }

        internal virtual DbSet<BUYERSADDAGROITEMTOINTEREST> BUYERSADDAGROITEMTOINTERESTs
        {
            get;
            set;
        }

        internal virtual DbSet<CATEGORY> CATEGORIES
        {
            get;
            set;
        }

        internal virtual DbSet<CITY> CITIES
        {
            get;
            set;
        }

        internal virtual DbSet<SELLERSFAVORITESBUYER> SELLERSFAVORITESBUYERs
        {
            get;
            set;
        }

        internal virtual DbSet<USER> USERs
        {
            get;
            set;
        }

        #region Methods

        internal void AddBuyerToInterest(long? sellerId, long? buyerId)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.AddBuyerToInterest";

                    DbParameter sellerIdParameter = cmd.CreateParameter();
                    sellerIdParameter.ParameterName = "sellerId";
                    sellerIdParameter.Direction = ParameterDirection.Input;
                    sellerIdParameter.DbType = DbType.Int64;
                    sellerIdParameter.Precision = 19;
                    sellerIdParameter.Scale = 0;
                    if (sellerId.HasValue)
                    {
                        sellerIdParameter.Value = sellerId.Value;
                    }
                    else
                    {
                        sellerIdParameter.Size = -1;
                        sellerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sellerIdParameter);

                    DbParameter buyerIdParameter = cmd.CreateParameter();
                    buyerIdParameter.ParameterName = "buyerId";
                    buyerIdParameter.Direction = ParameterDirection.Input;
                    buyerIdParameter.DbType = DbType.Int64;
                    buyerIdParameter.Precision = 19;
                    buyerIdParameter.Scale = 0;
                    if (buyerId.HasValue)
                    {
                        buyerIdParameter.Value = buyerId.Value;
                    }
                    else
                    {
                        buyerIdParameter.Size = -1;
                        buyerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(buyerIdParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task AddBuyerToInterestAsync(long? sellerId, long? buyerId)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.AddBuyerToInterest";

                    DbParameter sellerIdParameter = cmd.CreateParameter();
                    sellerIdParameter.ParameterName = "sellerId";
                    sellerIdParameter.Direction = ParameterDirection.Input;
                    sellerIdParameter.DbType = DbType.Int64;
                    sellerIdParameter.Precision = 19;
                    sellerIdParameter.Scale = 0;
                    if (sellerId.HasValue)
                    {
                        sellerIdParameter.Value = sellerId.Value;
                    }
                    else
                    {
                        sellerIdParameter.Size = -1;
                        sellerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sellerIdParameter);

                    DbParameter buyerIdParameter = cmd.CreateParameter();
                    buyerIdParameter.ParameterName = "buyerId";
                    buyerIdParameter.Direction = ParameterDirection.Input;
                    buyerIdParameter.DbType = DbType.Int64;
                    buyerIdParameter.Precision = 19;
                    buyerIdParameter.Scale = 0;
                    if (buyerId.HasValue)
                    {
                        buyerIdParameter.Value = buyerId.Value;
                    }
                    else
                    {
                        buyerIdParameter.Size = -1;
                        buyerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(buyerIdParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal List<AddNewAdvertisementResult> AddNewAdvertisement(short? quality, short? quantity, System.DateTime? dateTime, decimal? price, string picture, long? sellerId, int? itemId, short? cityId)
        {

            List<AddNewAdvertisementResult> result = new List<AddNewAdvertisementResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.AddNewAdvertisement";

                    DbParameter qualityParameter = cmd.CreateParameter();
                    qualityParameter.ParameterName = "quality";
                    qualityParameter.Direction = ParameterDirection.Input;
                    qualityParameter.DbType = DbType.Int16;
                    qualityParameter.Precision = 5;
                    qualityParameter.Scale = 0;
                    if (quality.HasValue)
                    {
                        qualityParameter.Value = quality.Value;
                    }
                    else
                    {
                        qualityParameter.Size = -1;
                        qualityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(qualityParameter);

                    DbParameter quantityParameter = cmd.CreateParameter();
                    quantityParameter.ParameterName = "quantity";
                    quantityParameter.Direction = ParameterDirection.Input;
                    quantityParameter.DbType = DbType.Int16;
                    quantityParameter.Precision = 5;
                    quantityParameter.Scale = 0;
                    if (quantity.HasValue)
                    {
                        quantityParameter.Value = quantity.Value;
                    }
                    else
                    {
                        quantityParameter.Size = -1;
                        quantityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(quantityParameter);

                    DbParameter dateTimeParameter = cmd.CreateParameter();
                    dateTimeParameter.ParameterName = "dateTime";
                    dateTimeParameter.Direction = ParameterDirection.Input;
                    dateTimeParameter.DbType = DbType.DateTime;
                    if (dateTime.HasValue)
                    {
                        dateTimeParameter.Value = dateTime.Value;
                    }
                    else
                    {
                        dateTimeParameter.Size = -1;
                        dateTimeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(dateTimeParameter);

                    DbParameter priceParameter = cmd.CreateParameter();
                    priceParameter.ParameterName = "price";
                    priceParameter.Direction = ParameterDirection.Input;
                    priceParameter.DbType = DbType.Decimal;
                    priceParameter.Precision = 19;
                    priceParameter.Scale = 4;
                    if (price.HasValue)
                    {
                        priceParameter.Value = price.Value;
                    }
                    else
                    {
                        priceParameter.Size = -1;
                        priceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(priceParameter);

                    DbParameter pictureParameter = cmd.CreateParameter();
                    pictureParameter.ParameterName = "picture";
                    pictureParameter.Direction = ParameterDirection.Input;
                    pictureParameter.DbType = DbType.String;
                    if (picture != null)
                    {
                        pictureParameter.Value = picture;
                    }
                    else
                    {
                        pictureParameter.Size = -1;
                        pictureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(pictureParameter);

                    DbParameter sellerIdParameter = cmd.CreateParameter();
                    sellerIdParameter.ParameterName = "sellerId";
                    sellerIdParameter.Direction = ParameterDirection.Input;
                    sellerIdParameter.DbType = DbType.Int64;
                    sellerIdParameter.Precision = 19;
                    sellerIdParameter.Scale = 0;
                    if (sellerId.HasValue)
                    {
                        sellerIdParameter.Value = sellerId.Value;
                    }
                    else
                    {
                        sellerIdParameter.Size = -1;
                        sellerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sellerIdParameter);

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter cityIdParameter = cmd.CreateParameter();
                    cityIdParameter.ParameterName = "cityId";
                    cityIdParameter.Direction = ParameterDirection.Input;
                    cityIdParameter.DbType = DbType.Int16;
                    cityIdParameter.Precision = 5;
                    cityIdParameter.Scale = 0;
                    if (cityId.HasValue)
                    {
                        cityIdParameter.Value = cityId.Value;
                    }
                    else
                    {
                        cityIdParameter.Size = -1;
                        cityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cityIdParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            AddNewAdvertisementResult row = new AddNewAdvertisementResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            }
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(decimal));
                            }
                            else
                            {
                                row.Column0 = null;
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<AddNewAdvertisementResult>> AddNewAdvertisementAsync(short? quality, short? quantity, System.DateTime? dateTime, decimal? price, string picture, long? sellerId, int? itemId, short? cityId)
        {

            List<AddNewAdvertisementResult> result = new List<AddNewAdvertisementResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.AddNewAdvertisement";

                    DbParameter qualityParameter = cmd.CreateParameter();
                    qualityParameter.ParameterName = "quality";
                    qualityParameter.Direction = ParameterDirection.Input;
                    qualityParameter.DbType = DbType.Int16;
                    qualityParameter.Precision = 5;
                    qualityParameter.Scale = 0;
                    if (quality.HasValue)
                    {
                        qualityParameter.Value = quality.Value;
                    }
                    else
                    {
                        qualityParameter.Size = -1;
                        qualityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(qualityParameter);

                    DbParameter quantityParameter = cmd.CreateParameter();
                    quantityParameter.ParameterName = "quantity";
                    quantityParameter.Direction = ParameterDirection.Input;
                    quantityParameter.DbType = DbType.Int16;
                    quantityParameter.Precision = 5;
                    quantityParameter.Scale = 0;
                    if (quantity.HasValue)
                    {
                        quantityParameter.Value = quantity.Value;
                    }
                    else
                    {
                        quantityParameter.Size = -1;
                        quantityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(quantityParameter);

                    DbParameter dateTimeParameter = cmd.CreateParameter();
                    dateTimeParameter.ParameterName = "dateTime";
                    dateTimeParameter.Direction = ParameterDirection.Input;
                    dateTimeParameter.DbType = DbType.DateTime;
                    if (dateTime.HasValue)
                    {
                        dateTimeParameter.Value = dateTime.Value;
                    }
                    else
                    {
                        dateTimeParameter.Size = -1;
                        dateTimeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(dateTimeParameter);

                    DbParameter priceParameter = cmd.CreateParameter();
                    priceParameter.ParameterName = "price";
                    priceParameter.Direction = ParameterDirection.Input;
                    priceParameter.DbType = DbType.Decimal;
                    priceParameter.Precision = 19;
                    priceParameter.Scale = 4;
                    if (price.HasValue)
                    {
                        priceParameter.Value = price.Value;
                    }
                    else
                    {
                        priceParameter.Size = -1;
                        priceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(priceParameter);

                    DbParameter pictureParameter = cmd.CreateParameter();
                    pictureParameter.ParameterName = "picture";
                    pictureParameter.Direction = ParameterDirection.Input;
                    pictureParameter.DbType = DbType.String;
                    if (picture != null)
                    {
                        pictureParameter.Value = picture;
                    }
                    else
                    {
                        pictureParameter.Size = -1;
                        pictureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(pictureParameter);

                    DbParameter sellerIdParameter = cmd.CreateParameter();
                    sellerIdParameter.ParameterName = "sellerId";
                    sellerIdParameter.Direction = ParameterDirection.Input;
                    sellerIdParameter.DbType = DbType.Int64;
                    sellerIdParameter.Precision = 19;
                    sellerIdParameter.Scale = 0;
                    if (sellerId.HasValue)
                    {
                        sellerIdParameter.Value = sellerId.Value;
                    }
                    else
                    {
                        sellerIdParameter.Size = -1;
                        sellerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sellerIdParameter);

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter cityIdParameter = cmd.CreateParameter();
                    cityIdParameter.ParameterName = "cityId";
                    cityIdParameter.Direction = ParameterDirection.Input;
                    cityIdParameter.DbType = DbType.Int16;
                    cityIdParameter.Precision = 5;
                    cityIdParameter.Scale = 0;
                    if (cityId.HasValue)
                    {
                        cityIdParameter.Value = cityId.Value;
                    }
                    else
                    {
                        cityIdParameter.Size = -1;
                        cityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cityIdParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            AddNewAdvertisementResult row = new AddNewAdvertisementResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            }
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(decimal));
                            }
                            else
                            {
                                row.Column0 = null;
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<AddNewAdvertisementResult> AddNewAgroItem(string name, string uName, string scale, string uScale, short? catId)
        {

            List<AddNewAdvertisementResult> result = new List<AddNewAdvertisementResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.AddNewAgroItem";

                    DbParameter nameParameter = cmd.CreateParameter();
                    nameParameter.ParameterName = "name";
                    nameParameter.Direction = ParameterDirection.Input;
                    nameParameter.DbType = DbType.String;
                    nameParameter.Size = 50;
                    if (name != null)
                    {
                        nameParameter.Value = name;
                    }
                    else
                    {
                        nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nameParameter);

                    DbParameter uNameParameter = cmd.CreateParameter();
                    uNameParameter.ParameterName = "uName";
                    uNameParameter.Direction = ParameterDirection.Input;
                    uNameParameter.DbType = DbType.String;
                    uNameParameter.Size = 50;
                    if (uName != null)
                    {
                        uNameParameter.Value = uName;
                    }
                    else
                    {
                        uNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(uNameParameter);

                    DbParameter scaleParameter = cmd.CreateParameter();
                    scaleParameter.ParameterName = "scale";
                    scaleParameter.Direction = ParameterDirection.Input;
                    scaleParameter.DbType = DbType.String;
                    scaleParameter.Size = 20;
                    if (scale != null)
                    {
                        scaleParameter.Value = scale;
                    }
                    else
                    {
                        scaleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(scaleParameter);

                    DbParameter uScaleParameter = cmd.CreateParameter();
                    uScaleParameter.ParameterName = "uScale";
                    uScaleParameter.Direction = ParameterDirection.Input;
                    uScaleParameter.DbType = DbType.String;
                    uScaleParameter.Size = 20;
                    if (uScale != null)
                    {
                        uScaleParameter.Value = uScale;
                    }
                    else
                    {
                        uScaleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(uScaleParameter);

                    DbParameter catIdParameter = cmd.CreateParameter();
                    catIdParameter.ParameterName = "catId";
                    catIdParameter.Direction = ParameterDirection.Input;
                    catIdParameter.DbType = DbType.Int16;
                    catIdParameter.Precision = 5;
                    catIdParameter.Scale = 0;
                    if (catId.HasValue)
                    {
                        catIdParameter.Value = catId.Value;
                    }
                    else
                    {
                        catIdParameter.Size = -1;
                        catIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(catIdParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            AddNewAdvertisementResult row = new AddNewAdvertisementResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            }
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(decimal));
                            }
                            else
                            {
                                row.Column0 = null;
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<AddNewAdvertisementResult>> AddNewAgroItemAsync(string name, string uName, string scale, string uScale, short? catId)
        {

            List<AddNewAdvertisementResult> result = new List<AddNewAdvertisementResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.AddNewAgroItem";

                    DbParameter nameParameter = cmd.CreateParameter();
                    nameParameter.ParameterName = "name";
                    nameParameter.Direction = ParameterDirection.Input;
                    nameParameter.DbType = DbType.String;
                    nameParameter.Size = 50;
                    if (name != null)
                    {
                        nameParameter.Value = name;
                    }
                    else
                    {
                        nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nameParameter);

                    DbParameter uNameParameter = cmd.CreateParameter();
                    uNameParameter.ParameterName = "uName";
                    uNameParameter.Direction = ParameterDirection.Input;
                    uNameParameter.DbType = DbType.String;
                    uNameParameter.Size = 50;
                    if (uName != null)
                    {
                        uNameParameter.Value = uName;
                    }
                    else
                    {
                        uNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(uNameParameter);

                    DbParameter scaleParameter = cmd.CreateParameter();
                    scaleParameter.ParameterName = "scale";
                    scaleParameter.Direction = ParameterDirection.Input;
                    scaleParameter.DbType = DbType.String;
                    scaleParameter.Size = 20;
                    if (scale != null)
                    {
                        scaleParameter.Value = scale;
                    }
                    else
                    {
                        scaleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(scaleParameter);

                    DbParameter uScaleParameter = cmd.CreateParameter();
                    uScaleParameter.ParameterName = "uScale";
                    uScaleParameter.Direction = ParameterDirection.Input;
                    uScaleParameter.DbType = DbType.String;
                    uScaleParameter.Size = 20;
                    if (uScale != null)
                    {
                        uScaleParameter.Value = uScale;
                    }
                    else
                    {
                        uScaleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(uScaleParameter);

                    DbParameter catIdParameter = cmd.CreateParameter();
                    catIdParameter.ParameterName = "catId";
                    catIdParameter.Direction = ParameterDirection.Input;
                    catIdParameter.DbType = DbType.Int16;
                    catIdParameter.Precision = 5;
                    catIdParameter.Scale = 0;
                    if (catId.HasValue)
                    {
                        catIdParameter.Value = catId.Value;
                    }
                    else
                    {
                        catIdParameter.Size = -1;
                        catIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(catIdParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            AddNewAdvertisementResult row = new AddNewAdvertisementResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            }
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(decimal));
                            }
                            else
                            {
                                row.Column0 = null;
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<AddNewAdvertisementResult> AddNewCategory(string name, string uName)
        {

            List<AddNewAdvertisementResult> result = new List<AddNewAdvertisementResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.AddNewCategory";

                    DbParameter nameParameter = cmd.CreateParameter();
                    nameParameter.ParameterName = "name";
                    nameParameter.Direction = ParameterDirection.Input;
                    nameParameter.DbType = DbType.String;
                    nameParameter.Size = 50;
                    if (name != null)
                    {
                        nameParameter.Value = name;
                    }
                    else
                    {
                        nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nameParameter);

                    DbParameter uNameParameter = cmd.CreateParameter();
                    uNameParameter.ParameterName = "uName";
                    uNameParameter.Direction = ParameterDirection.Input;
                    uNameParameter.DbType = DbType.String;
                    uNameParameter.Size = 50;
                    if (uName != null)
                    {
                        uNameParameter.Value = uName;
                    }
                    else
                    {
                        uNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(uNameParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            AddNewAdvertisementResult row = new AddNewAdvertisementResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            }
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(decimal));
                            }
                            else
                            {
                                row.Column0 = null;
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<AddNewAdvertisementResult>> AddNewCategoryAsync(string name, string uName)
        {

            List<AddNewAdvertisementResult> result = new List<AddNewAdvertisementResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.AddNewCategory";

                    DbParameter nameParameter = cmd.CreateParameter();
                    nameParameter.ParameterName = "name";
                    nameParameter.Direction = ParameterDirection.Input;
                    nameParameter.DbType = DbType.String;
                    nameParameter.Size = 50;
                    if (name != null)
                    {
                        nameParameter.Value = name;
                    }
                    else
                    {
                        nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nameParameter);

                    DbParameter uNameParameter = cmd.CreateParameter();
                    uNameParameter.ParameterName = "uName";
                    uNameParameter.Direction = ParameterDirection.Input;
                    uNameParameter.DbType = DbType.String;
                    uNameParameter.Size = 50;
                    if (uName != null)
                    {
                        uNameParameter.Value = uName;
                    }
                    else
                    {
                        uNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(uNameParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            AddNewAdvertisementResult row = new AddNewAdvertisementResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            }
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(decimal));
                            }
                            else
                            {
                                row.Column0 = null;
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<AddNewAdvertisementResult> AddNewCity(string name, decimal? lat, decimal? lng)
        {

            List<AddNewAdvertisementResult> result = new List<AddNewAdvertisementResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.AddNewCity";

                    DbParameter nameParameter = cmd.CreateParameter();
                    nameParameter.ParameterName = "name";
                    nameParameter.Direction = ParameterDirection.Input;
                    nameParameter.DbType = DbType.String;
                    nameParameter.Size = 50;
                    if (name != null)
                    {
                        nameParameter.Value = name;
                    }
                    else
                    {
                        nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nameParameter);

                    DbParameter latParameter = cmd.CreateParameter();
                    latParameter.ParameterName = "lat";
                    latParameter.Direction = ParameterDirection.Input;
                    latParameter.DbType = DbType.Decimal;
                    latParameter.Precision = 10;
                    latParameter.Scale = 8;
                    if (lat.HasValue)
                    {
                        latParameter.Value = lat.Value;
                    }
                    else
                    {
                        latParameter.Size = -1;
                        latParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(latParameter);

                    DbParameter lngParameter = cmd.CreateParameter();
                    lngParameter.ParameterName = "lng";
                    lngParameter.Direction = ParameterDirection.Input;
                    lngParameter.DbType = DbType.Decimal;
                    lngParameter.Precision = 11;
                    lngParameter.Scale = 8;
                    if (lng.HasValue)
                    {
                        lngParameter.Value = lng.Value;
                    }
                    else
                    {
                        lngParameter.Size = -1;
                        lngParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(lngParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            AddNewAdvertisementResult row = new AddNewAdvertisementResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            }
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(decimal));
                            }
                            else
                            {
                                row.Column0 = null;
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<AddNewAdvertisementResult>> AddNewCityAsync(string name, decimal? lat, decimal? lng)
        {

            List<AddNewAdvertisementResult> result = new List<AddNewAdvertisementResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.AddNewCity";

                    DbParameter nameParameter = cmd.CreateParameter();
                    nameParameter.ParameterName = "name";
                    nameParameter.Direction = ParameterDirection.Input;
                    nameParameter.DbType = DbType.String;
                    nameParameter.Size = 50;
                    if (name != null)
                    {
                        nameParameter.Value = name;
                    }
                    else
                    {
                        nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nameParameter);

                    DbParameter latParameter = cmd.CreateParameter();
                    latParameter.ParameterName = "lat";
                    latParameter.Direction = ParameterDirection.Input;
                    latParameter.DbType = DbType.Decimal;
                    latParameter.Precision = 10;
                    latParameter.Scale = 8;
                    if (lat.HasValue)
                    {
                        latParameter.Value = lat.Value;
                    }
                    else
                    {
                        latParameter.Size = -1;
                        latParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(latParameter);

                    DbParameter lngParameter = cmd.CreateParameter();
                    lngParameter.ParameterName = "lng";
                    lngParameter.Direction = ParameterDirection.Input;
                    lngParameter.DbType = DbType.Decimal;
                    lngParameter.Precision = 11;
                    lngParameter.Scale = 8;
                    if (lng.HasValue)
                    {
                        lngParameter.Value = lng.Value;
                    }
                    else
                    {
                        lngParameter.Size = -1;
                        lngParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(lngParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            AddNewAdvertisementResult row = new AddNewAdvertisementResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            }
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(decimal));
                            }
                            else
                            {
                                row.Column0 = null;
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<AddNewAdvertisementResult> AddNewUser(string fName, string lName, string countryCode, string companyCode, string phone, string address, short? cityId)
        {

            List<AddNewAdvertisementResult> result = new List<AddNewAdvertisementResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.AddNewUser";

                    DbParameter fNameParameter = cmd.CreateParameter();
                    fNameParameter.ParameterName = "fName";
                    fNameParameter.Direction = ParameterDirection.Input;
                    fNameParameter.DbType = DbType.String;
                    if (fName != null)
                    {
                        fNameParameter.Value = fName;
                    }
                    else
                    {
                        fNameParameter.Size = -1;
                        fNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fNameParameter);

                    DbParameter lNameParameter = cmd.CreateParameter();
                    lNameParameter.ParameterName = "lName";
                    lNameParameter.Direction = ParameterDirection.Input;
                    lNameParameter.DbType = DbType.String;
                    if (lName != null)
                    {
                        lNameParameter.Value = lName;
                    }
                    else
                    {
                        lNameParameter.Size = -1;
                        lNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(lNameParameter);

                    DbParameter countryCodeParameter = cmd.CreateParameter();
                    countryCodeParameter.ParameterName = "countryCode";
                    countryCodeParameter.Direction = ParameterDirection.Input;
                    countryCodeParameter.DbType = DbType.String;
                    countryCodeParameter.Size = 6;
                    if (countryCode != null)
                    {
                        countryCodeParameter.Value = countryCode;
                    }
                    else
                    {
                        countryCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(countryCodeParameter);

                    DbParameter companyCodeParameter = cmd.CreateParameter();
                    companyCodeParameter.ParameterName = "companyCode";
                    companyCodeParameter.Direction = ParameterDirection.Input;
                    companyCodeParameter.DbType = DbType.String;
                    companyCodeParameter.Size = 6;
                    if (companyCode != null)
                    {
                        companyCodeParameter.Value = companyCode;
                    }
                    else
                    {
                        companyCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(companyCodeParameter);

                    DbParameter phoneParameter = cmd.CreateParameter();
                    phoneParameter.ParameterName = "phone";
                    phoneParameter.Direction = ParameterDirection.Input;
                    phoneParameter.DbType = DbType.String;
                    phoneParameter.Size = 14;
                    if (phone != null)
                    {
                        phoneParameter.Value = phone;
                    }
                    else
                    {
                        phoneParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(phoneParameter);

                    DbParameter addressParameter = cmd.CreateParameter();
                    addressParameter.ParameterName = "address";
                    addressParameter.Direction = ParameterDirection.Input;
                    addressParameter.DbType = DbType.String;
                    if (address != null)
                    {
                        addressParameter.Value = address;
                    }
                    else
                    {
                        addressParameter.Size = -1;
                        addressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(addressParameter);

                    DbParameter cityIdParameter = cmd.CreateParameter();
                    cityIdParameter.ParameterName = "cityId";
                    cityIdParameter.Direction = ParameterDirection.Input;
                    cityIdParameter.DbType = DbType.Int16;
                    cityIdParameter.Precision = 5;
                    cityIdParameter.Scale = 0;
                    if (cityId.HasValue)
                    {
                        cityIdParameter.Value = cityId.Value;
                    }
                    else
                    {
                        cityIdParameter.Size = -1;
                        cityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cityIdParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            AddNewAdvertisementResult row = new AddNewAdvertisementResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            }
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(decimal));
                            }
                            else
                            {
                                row.Column0 = null;
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<AddNewAdvertisementResult>> AddNewUserAsync(string fName, string lName, string countryCode, string companyCode, string phone, string address, short? cityId)
        {

            List<AddNewAdvertisementResult> result = new List<AddNewAdvertisementResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.AddNewUser";

                    DbParameter fNameParameter = cmd.CreateParameter();
                    fNameParameter.ParameterName = "fName";
                    fNameParameter.Direction = ParameterDirection.Input;
                    fNameParameter.DbType = DbType.String;
                    if (fName != null)
                    {
                        fNameParameter.Value = fName;
                    }
                    else
                    {
                        fNameParameter.Size = -1;
                        fNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fNameParameter);

                    DbParameter lNameParameter = cmd.CreateParameter();
                    lNameParameter.ParameterName = "lName";
                    lNameParameter.Direction = ParameterDirection.Input;
                    lNameParameter.DbType = DbType.String;
                    if (lName != null)
                    {
                        lNameParameter.Value = lName;
                    }
                    else
                    {
                        lNameParameter.Size = -1;
                        lNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(lNameParameter);

                    DbParameter countryCodeParameter = cmd.CreateParameter();
                    countryCodeParameter.ParameterName = "countryCode";
                    countryCodeParameter.Direction = ParameterDirection.Input;
                    countryCodeParameter.DbType = DbType.String;
                    countryCodeParameter.Size = 6;
                    if (countryCode != null)
                    {
                        countryCodeParameter.Value = countryCode;
                    }
                    else
                    {
                        countryCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(countryCodeParameter);

                    DbParameter companyCodeParameter = cmd.CreateParameter();
                    companyCodeParameter.ParameterName = "companyCode";
                    companyCodeParameter.Direction = ParameterDirection.Input;
                    companyCodeParameter.DbType = DbType.String;
                    companyCodeParameter.Size = 6;
                    if (companyCode != null)
                    {
                        companyCodeParameter.Value = companyCode;
                    }
                    else
                    {
                        companyCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(companyCodeParameter);

                    DbParameter phoneParameter = cmd.CreateParameter();
                    phoneParameter.ParameterName = "phone";
                    phoneParameter.Direction = ParameterDirection.Input;
                    phoneParameter.DbType = DbType.String;
                    phoneParameter.Size = 14;
                    if (phone != null)
                    {
                        phoneParameter.Value = phone;
                    }
                    else
                    {
                        phoneParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(phoneParameter);

                    DbParameter addressParameter = cmd.CreateParameter();
                    addressParameter.ParameterName = "address";
                    addressParameter.Direction = ParameterDirection.Input;
                    addressParameter.DbType = DbType.String;
                    if (address != null)
                    {
                        addressParameter.Value = address;
                    }
                    else
                    {
                        addressParameter.Size = -1;
                        addressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(addressParameter);

                    DbParameter cityIdParameter = cmd.CreateParameter();
                    cityIdParameter.ParameterName = "cityId";
                    cityIdParameter.Direction = ParameterDirection.Input;
                    cityIdParameter.DbType = DbType.Int16;
                    cityIdParameter.Precision = 5;
                    cityIdParameter.Scale = 0;
                    if (cityId.HasValue)
                    {
                        cityIdParameter.Value = cityId.Value;
                    }
                    else
                    {
                        cityIdParameter.Size = -1;
                        cityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cityIdParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            AddNewAdvertisementResult row = new AddNewAdvertisementResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            }
                            else
                            if (fieldNames.Contains("column0") && !reader.IsDBNull(reader.GetOrdinal("column0")))
                            {
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(decimal));
                            }
                            else
                            {
                                row.Column0 = null;
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal void DeleteAgroItem(int? itemId, string name)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.DeleteAgroItem";

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter nameParameter = cmd.CreateParameter();
                    nameParameter.ParameterName = "name";
                    nameParameter.Direction = ParameterDirection.Input;
                    nameParameter.DbType = DbType.String;
                    nameParameter.Size = 50;
                    if (name != null)
                    {
                        nameParameter.Value = name;
                    }
                    else
                    {
                        nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nameParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task DeleteAgroItemAsync(int? itemId, string name)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.DeleteAgroItem";

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter nameParameter = cmd.CreateParameter();
                    nameParameter.ParameterName = "name";
                    nameParameter.Direction = ParameterDirection.Input;
                    nameParameter.DbType = DbType.String;
                    nameParameter.Size = 50;
                    if (name != null)
                    {
                        nameParameter.Value = name;
                    }
                    else
                    {
                        nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nameParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void FavAd(long? buyerId, long? adId)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.FavAd";

                    DbParameter buyerIdParameter = cmd.CreateParameter();
                    buyerIdParameter.ParameterName = "buyerId";
                    buyerIdParameter.Direction = ParameterDirection.Input;
                    buyerIdParameter.DbType = DbType.Int64;
                    buyerIdParameter.Precision = 19;
                    buyerIdParameter.Scale = 0;
                    if (buyerId.HasValue)
                    {
                        buyerIdParameter.Value = buyerId.Value;
                    }
                    else
                    {
                        buyerIdParameter.Size = -1;
                        buyerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(buyerIdParameter);

                    DbParameter adIdParameter = cmd.CreateParameter();
                    adIdParameter.ParameterName = "adId";
                    adIdParameter.Direction = ParameterDirection.Input;
                    adIdParameter.DbType = DbType.Int64;
                    adIdParameter.Precision = 19;
                    adIdParameter.Scale = 0;
                    if (adId.HasValue)
                    {
                        adIdParameter.Value = adId.Value;
                    }
                    else
                    {
                        adIdParameter.Size = -1;
                        adIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(adIdParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }
        internal void RegisterIdentity(long? userId, string identityId)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.RegisterIdentity";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);

                    DbParameter identityIdParameter = cmd.CreateParameter();
                    identityIdParameter.ParameterName = "identityId";
                    identityIdParameter.Direction = ParameterDirection.Input;
                    identityIdParameter.DbType = DbType.StringFixedLength;
                    if (!string.IsNullOrEmpty(identityId))
                    {
                        identityIdParameter.Value = identityId;
                    }
                    else
                    {
                        identityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(identityIdParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task FavAdAsync(long? buyerId, long? adId)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.FavAd";

                    DbParameter buyerIdParameter = cmd.CreateParameter();
                    buyerIdParameter.ParameterName = "buyerId";
                    buyerIdParameter.Direction = ParameterDirection.Input;
                    buyerIdParameter.DbType = DbType.Int64;
                    buyerIdParameter.Precision = 19;
                    buyerIdParameter.Scale = 0;
                    if (buyerId.HasValue)
                    {
                        buyerIdParameter.Value = buyerId.Value;
                    }
                    else
                    {
                        buyerIdParameter.Size = -1;
                        buyerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(buyerIdParameter);

                    DbParameter adIdParameter = cmd.CreateParameter();
                    adIdParameter.ParameterName = "adId";
                    adIdParameter.Direction = ParameterDirection.Input;
                    adIdParameter.DbType = DbType.Int64;
                    adIdParameter.Precision = 19;
                    adIdParameter.Scale = 0;
                    if (adId.HasValue)
                    {
                        adIdParameter.Value = adId.Value;
                    }
                    else
                    {
                        adIdParameter.Size = -1;
                        adIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(adIdParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal List<GetAdsCityResult> GetAdsCity(short? cityId)
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetAdsCity";

                    DbParameter cityIdParameter = cmd.CreateParameter();
                    cityIdParameter.ParameterName = "cityId";
                    cityIdParameter.Direction = ParameterDirection.Input;
                    cityIdParameter.DbType = DbType.Int16;
                    cityIdParameter.Precision = 5;
                    cityIdParameter.Scale = 0;
                    if (cityId.HasValue)
                    {
                        cityIdParameter.Value = cityId.Value;
                    }
                    else
                    {
                        cityIdParameter.Size = -1;
                        cityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cityIdParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetAdsCityResult>> GetAdsCityAsync(short? cityId)
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetAdsCity";

                    DbParameter cityIdParameter = cmd.CreateParameter();
                    cityIdParameter.ParameterName = "cityId";
                    cityIdParameter.Direction = ParameterDirection.Input;
                    cityIdParameter.DbType = DbType.Int16;
                    cityIdParameter.Precision = 5;
                    cityIdParameter.Scale = 0;
                    if (cityId.HasValue)
                    {
                        cityIdParameter.Value = cityId.Value;
                    }
                    else
                    {
                        cityIdParameter.Size = -1;
                        cityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cityIdParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<ADVERTISEMENT> GetAdvertisement(long? id)
        {

            List<ADVERTISEMENT> result = new List<ADVERTISEMENT>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetAdvertisement";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int64;
                    idParameter.Precision = 19;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            ADVERTISEMENT row = new ADVERTISEMENT();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            if (fieldNames.Contains("Quality") && !reader.IsDBNull(reader.GetOrdinal("Quality")))
                            {
                                row.Quality = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Quality")), typeof(short));
                            }

                            if (fieldNames.Contains("Quantity") && !reader.IsDBNull(reader.GetOrdinal("Quantity")))
                            {
                                row.Quantity = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Quantity")), typeof(short));
                            }

                            if (fieldNames.Contains("PostedDateTime") && !reader.IsDBNull(reader.GetOrdinal("PostedDateTime")))
                            {
                                row.PostedDateTime = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"PostedDateTime")), typeof(System.DateTime));
                            }

                            if (fieldNames.Contains("Price") && !reader.IsDBNull(reader.GetOrdinal("Price")))
                            {
                                row.Price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Price")), typeof(decimal));
                            }

                            if (fieldNames.Contains("Picture") && !reader.IsDBNull(reader.GetOrdinal("Picture")))
                            {
                                row.Picture = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Picture")), typeof(string));
                            }

                            if (fieldNames.Contains("SellerId") && !reader.IsDBNull(reader.GetOrdinal("SellerId")))
                            {
                                row.Seller.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SellerId")), typeof(long));
                            }

                            if (fieldNames.Contains("ItemId") && !reader.IsDBNull(reader.GetOrdinal("ItemId")))
                            {
                                row.AgroItem.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ItemId")), typeof(int));
                            }

                            if (fieldNames.Contains("CityId") && !reader.IsDBNull(reader.GetOrdinal("CityId")))
                            {
                                row.City.Id = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CityId")), typeof(short));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<ADVERTISEMENT>> GetAdvertisementAsync(long? id)
        {

            List<ADVERTISEMENT> result = new List<ADVERTISEMENT>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetAdvertisement";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int64;
                    idParameter.Precision = 19;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            ADVERTISEMENT row = new ADVERTISEMENT();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            if (fieldNames.Contains("Quality") && !reader.IsDBNull(reader.GetOrdinal("Quality")))
                            {
                                row.Quality = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Quality")), typeof(short));
                            }

                            if (fieldNames.Contains("Quantity") && !reader.IsDBNull(reader.GetOrdinal("Quantity")))
                            {
                                row.Quantity = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Quantity")), typeof(short));
                            }

                            if (fieldNames.Contains("PostedDateTime") && !reader.IsDBNull(reader.GetOrdinal("PostedDateTime")))
                            {
                                row.PostedDateTime = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"PostedDateTime")), typeof(System.DateTime));
                            }

                            if (fieldNames.Contains("Price") && !reader.IsDBNull(reader.GetOrdinal("Price")))
                            {
                                row.Price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Price")), typeof(decimal));
                            }

                            if (fieldNames.Contains("Picture") && !reader.IsDBNull(reader.GetOrdinal("Picture")))
                            {
                                row.Picture = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Picture")), typeof(string));
                            }

                            if (fieldNames.Contains("SellerId") && !reader.IsDBNull(reader.GetOrdinal("SellerId")))
                            {
                                row.Seller.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SellerId")), typeof(long));
                            }

                            if (fieldNames.Contains("ItemId") && !reader.IsDBNull(reader.GetOrdinal("ItemId")))
                            {
                                row.AgroItem.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ItemId")), typeof(int));
                            }

                            if (fieldNames.Contains("CityId") && !reader.IsDBNull(reader.GetOrdinal("CityId")))
                            {
                                row.City.Id = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CityId")), typeof(short));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<GetAdsCityResult> GetAdvertisement(int? max)
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetAdvertisements";

                    DbParameter maxParameter = cmd.CreateParameter();
                    maxParameter.ParameterName = "max";
                    maxParameter.Direction = ParameterDirection.Input;
                    maxParameter.DbType = DbType.Int32;
                    maxParameter.Precision = 10;
                    maxParameter.Scale = 0;
                    if (max.HasValue)
                    {
                        maxParameter.Value = max.Value;
                    }
                    else
                    {
                        maxParameter.Size = -1;
                        maxParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(maxParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetAdsCityResult>> GetAdvertisementAsync(int? max)
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetAdvertisements";

                    DbParameter maxParameter = cmd.CreateParameter();
                    maxParameter.ParameterName = "max";
                    maxParameter.Direction = ParameterDirection.Input;
                    maxParameter.DbType = DbType.Int32;
                    maxParameter.Precision = 10;
                    maxParameter.Scale = 0;
                    if (max.HasValue)
                    {
                        maxParameter.Value = max.Value;
                    }
                    else
                    {
                        maxParameter.Size = -1;
                        maxParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(maxParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<AGROITEM> GetAgroItem(int? id)
        {

            List<AGROITEM> result = new List<AGROITEM>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetAgroItem";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            AGROITEM row = new AGROITEM();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));
                            }

                            if (fieldNames.Contains("Name") && !reader.IsDBNull(reader.GetOrdinal("Name")))
                            {
                                row.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Name")), typeof(string));
                            }

                            if (fieldNames.Contains("Uname") && !reader.IsDBNull(reader.GetOrdinal("Uname")))
                            {
                                row.Uname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Uname")), typeof(string));
                            }
                            else
                            {
                                row.Uname = null;
                            }

                            if (fieldNames.Contains("WeightScale") && !reader.IsDBNull(reader.GetOrdinal("WeightScale")))
                            {
                                row.WeightScale = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"WeightScale")), typeof(string));
                            }

                            if (fieldNames.Contains("UWeightScale") && !reader.IsDBNull(reader.GetOrdinal("UWeightScale")))
                            {
                                row.UWeightScale = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"UWeightScale")), typeof(string));
                            }
                            else
                            {
                                row.UWeightScale = null;
                            }

                            if (fieldNames.Contains("CategoryId") && !reader.IsDBNull(reader.GetOrdinal("CategoryId")))
                            {
                                row.CATEGORY.Id = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CategoryId")), typeof(short));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<AGROITEM>> GetAgroItemAsync(int? id)
        {

            List<AGROITEM> result = new List<AGROITEM>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetAgroItem";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int32;
                    idParameter.Precision = 10;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            AGROITEM row = new AGROITEM();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));
                            }

                            if (fieldNames.Contains("Name") && !reader.IsDBNull(reader.GetOrdinal("Name")))
                            {
                                row.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Name")), typeof(string));
                            }

                            if (fieldNames.Contains("Uname") && !reader.IsDBNull(reader.GetOrdinal("Uname")))
                            {
                                row.Uname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Uname")), typeof(string));
                            }
                            else
                            {
                                row.Uname = null;
                            }

                            if (fieldNames.Contains("WeightScale") && !reader.IsDBNull(reader.GetOrdinal("WeightScale")))
                            {
                                row.WeightScale = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"WeightScale")), typeof(string));
                            }

                            if (fieldNames.Contains("UWeightScale") && !reader.IsDBNull(reader.GetOrdinal("UWeightScale")))
                            {
                                row.UWeightScale = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"UWeightScale")), typeof(string));
                            }
                            else
                            {
                                row.UWeightScale = null;
                            }

                            if (fieldNames.Contains("CategoryId") && !reader.IsDBNull(reader.GetOrdinal("CategoryId")))
                            {
                                row.CATEGORY.Id = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CategoryId")), typeof(short));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<GetAgroItem1Result> GetAgroItem1(int? max)
        {

            List<GetAgroItem1Result> result = new List<GetAgroItem1Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetAgroItems";

                    DbParameter maxParameter = cmd.CreateParameter();
                    maxParameter.ParameterName = "max";
                    maxParameter.Direction = ParameterDirection.Input;
                    maxParameter.DbType = DbType.Int32;
                    maxParameter.Precision = 10;
                    maxParameter.Scale = 0;
                    if (max.HasValue)
                    {
                        maxParameter.Value = max.Value;
                    }
                    else
                    {
                        maxParameter.Size = -1;
                        maxParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(maxParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAgroItem1Result row = new GetAgroItem1Result();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (int)Convert.ChangeType(reader.GetValue(0), typeof(int));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetAgroItem1Result>> GetAgroItem1Async(int? max)
        {

            List<GetAgroItem1Result> result = new List<GetAgroItem1Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetAgroItems";

                    DbParameter maxParameter = cmd.CreateParameter();
                    maxParameter.ParameterName = "max";
                    maxParameter.Direction = ParameterDirection.Input;
                    maxParameter.DbType = DbType.Int32;
                    maxParameter.Precision = 10;
                    maxParameter.Scale = 0;
                    if (max.HasValue)
                    {
                        maxParameter.Value = max.Value;
                    }
                    else
                    {
                        maxParameter.Size = -1;
                        maxParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(maxParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAgroItem1Result row = new GetAgroItem1Result();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (int)Convert.ChangeType(reader.GetValue(0), typeof(int));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<GetAdsCityResult> GetBuyer()
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetBuyers";
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetAdsCityResult>> GetBuyerAsync()
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetBuyers";
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<GetCategoryResult> GetCategory(int? max)
        {

            List<GetCategoryResult> result = new List<GetCategoryResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetCategories";

                    DbParameter maxParameter = cmd.CreateParameter();
                    maxParameter.ParameterName = "max";
                    maxParameter.Direction = ParameterDirection.Input;
                    maxParameter.DbType = DbType.Int32;
                    maxParameter.Precision = 10;
                    maxParameter.Scale = 0;
                    if (max.HasValue)
                    {
                        maxParameter.Value = max.Value;
                    }
                    else
                    {
                        maxParameter.Size = -1;
                        maxParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(maxParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetCategoryResult row = new GetCategoryResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (short)Convert.ChangeType(reader.GetValue(0), typeof(short));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(short));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetCategoryResult>> GetCategoryAsync(int? max)
        {

            List<GetCategoryResult> result = new List<GetCategoryResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetCategories";

                    DbParameter maxParameter = cmd.CreateParameter();
                    maxParameter.ParameterName = "max";
                    maxParameter.Direction = ParameterDirection.Input;
                    maxParameter.DbType = DbType.Int32;
                    maxParameter.Precision = 10;
                    maxParameter.Scale = 0;
                    if (max.HasValue)
                    {
                        maxParameter.Value = max.Value;
                    }
                    else
                    {
                        maxParameter.Size = -1;
                        maxParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(maxParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetCategoryResult row = new GetCategoryResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (short)Convert.ChangeType(reader.GetValue(0), typeof(short));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(short));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<CATEGORY> GetCategory(short? id)
        {

            List<CATEGORY> result = new List<CATEGORY>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetCategory";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int16;
                    idParameter.Precision = 5;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            CATEGORY row = new CATEGORY();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(short));
                            }

                            if (fieldNames.Contains("Name") && !reader.IsDBNull(reader.GetOrdinal("Name")))
                            {
                                row.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Name")), typeof(string));
                            }

                            if (fieldNames.Contains("UName") && !reader.IsDBNull(reader.GetOrdinal("UName")))
                            {
                                row.UName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"UName")), typeof(string));
                            }
                            else
                            {
                                row.UName = null;
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<CATEGORY>> GetCategoryAsync(short? id)
        {

            List<CATEGORY> result = new List<CATEGORY>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetCategory";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int16;
                    idParameter.Precision = 5;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            CATEGORY row = new CATEGORY();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(short));
                            }

                            if (fieldNames.Contains("Name") && !reader.IsDBNull(reader.GetOrdinal("Name")))
                            {
                                row.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Name")), typeof(string));
                            }

                            if (fieldNames.Contains("UName") && !reader.IsDBNull(reader.GetOrdinal("UName")))
                            {
                                row.UName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"UName")), typeof(string));
                            }
                            else
                            {
                                row.UName = null;
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<GetCategoryResult> GetCity(int? max)
        {

            List<GetCategoryResult> result = new List<GetCategoryResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetCities";

                    DbParameter maxParameter = cmd.CreateParameter();
                    maxParameter.ParameterName = "max";
                    maxParameter.Direction = ParameterDirection.Input;
                    maxParameter.DbType = DbType.Int32;
                    maxParameter.Precision = 10;
                    maxParameter.Scale = 0;
                    if (max.HasValue)
                    {
                        maxParameter.Value = max.Value;
                    }
                    else
                    {
                        maxParameter.Size = -1;
                        maxParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(maxParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetCategoryResult row = new GetCategoryResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (short)Convert.ChangeType(reader.GetValue(0), typeof(short));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(short));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetCategoryResult>> GetCityAsync(int? max)
        {

            List<GetCategoryResult> result = new List<GetCategoryResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetCities";

                    DbParameter maxParameter = cmd.CreateParameter();
                    maxParameter.ParameterName = "max";
                    maxParameter.Direction = ParameterDirection.Input;
                    maxParameter.DbType = DbType.Int32;
                    maxParameter.Precision = 10;
                    maxParameter.Scale = 0;
                    if (max.HasValue)
                    {
                        maxParameter.Value = max.Value;
                    }
                    else
                    {
                        maxParameter.Size = -1;
                        maxParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(maxParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetCategoryResult row = new GetCategoryResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (short)Convert.ChangeType(reader.GetValue(0), typeof(short));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(short));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<CITY> GetCity(short? id)
        {

            List<CITY> result = new List<CITY>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetCity";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int16;
                    idParameter.Precision = 5;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            CITY row = new CITY();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(short));
                            }

                            if (fieldNames.Contains("Name") && !reader.IsDBNull(reader.GetOrdinal("Name")))
                            {
                                row.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Name")), typeof(string));
                            }

                            if (fieldNames.Contains("GLat") && !reader.IsDBNull(reader.GetOrdinal("GLat")))
                            {
                                row.GLat = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"GLat")), typeof(decimal));
                            }

                            if (fieldNames.Contains("GLng") && !reader.IsDBNull(reader.GetOrdinal("GLng")))
                            {
                                row.GLng = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"GLng")), typeof(decimal));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<CITY>> GetCityAsync(short? id)
        {

            List<CITY> result = new List<CITY>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetCity";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int16;
                    idParameter.Precision = 5;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            CITY row = new CITY();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(short));
                            }

                            if (fieldNames.Contains("Name") && !reader.IsDBNull(reader.GetOrdinal("Name")))
                            {
                                row.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Name")), typeof(string));
                            }

                            if (fieldNames.Contains("GLat") && !reader.IsDBNull(reader.GetOrdinal("GLat")))
                            {
                                row.GLat = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"GLat")), typeof(decimal));
                            }

                            if (fieldNames.Contains("GLng") && !reader.IsDBNull(reader.GetOrdinal("GLng")))
                            {
                                row.GLng = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"GLng")), typeof(decimal));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<GetFavAdvertismentResult> GetFavAdvertisment(long? buyerId)
        {

            List<GetFavAdvertismentResult> result = new List<GetFavAdvertismentResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetFavAdvertisments";

                    DbParameter buyerIdParameter = cmd.CreateParameter();
                    buyerIdParameter.ParameterName = "buyerId";
                    buyerIdParameter.Direction = ParameterDirection.Input;
                    buyerIdParameter.DbType = DbType.Int64;
                    buyerIdParameter.Precision = 19;
                    buyerIdParameter.Scale = 0;
                    if (buyerId.HasValue)
                    {
                        buyerIdParameter.Value = buyerId.Value;
                    }
                    else
                    {
                        buyerIdParameter.Size = -1;
                        buyerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(buyerIdParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetFavAdvertismentResult row = new GetFavAdvertismentResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.AdId = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("AdId") && !reader.IsDBNull(reader.GetOrdinal("AdId")))
                            {
                                row.AdId = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"AdId")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetFavAdvertismentResult>> GetFavAdvertismentAsync(long? buyerId)
        {

            List<GetFavAdvertismentResult> result = new List<GetFavAdvertismentResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetFavAdvertisments";

                    DbParameter buyerIdParameter = cmd.CreateParameter();
                    buyerIdParameter.ParameterName = "buyerId";
                    buyerIdParameter.Direction = ParameterDirection.Input;
                    buyerIdParameter.DbType = DbType.Int64;
                    buyerIdParameter.Precision = 19;
                    buyerIdParameter.Scale = 0;
                    if (buyerId.HasValue)
                    {
                        buyerIdParameter.Value = buyerId.Value;
                    }
                    else
                    {
                        buyerIdParameter.Size = -1;
                        buyerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(buyerIdParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetFavAdvertismentResult row = new GetFavAdvertismentResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.AdId = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("AdId") && !reader.IsDBNull(reader.GetOrdinal("AdId")))
                            {
                                row.AdId = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"AdId")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<GetFavBuyerResult> GetFavBuyer(long? sellerId)
        {

            List<GetFavBuyerResult> result = new List<GetFavBuyerResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetFavBuyers";

                    DbParameter sellerIdParameter = cmd.CreateParameter();
                    sellerIdParameter.ParameterName = "sellerId";
                    sellerIdParameter.Direction = ParameterDirection.Input;
                    sellerIdParameter.DbType = DbType.Int64;
                    sellerIdParameter.Precision = 19;
                    sellerIdParameter.Scale = 0;
                    if (sellerId.HasValue)
                    {
                        sellerIdParameter.Value = sellerId.Value;
                    }
                    else
                    {
                        sellerIdParameter.Size = -1;
                        sellerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sellerIdParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetFavBuyerResult row = new GetFavBuyerResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.BuyerId = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("BuyerId") && !reader.IsDBNull(reader.GetOrdinal("BuyerId")))
                            {
                                row.BuyerId = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"BuyerId")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetFavBuyerResult>> GetFavBuyerAsync(long? sellerId)
        {

            List<GetFavBuyerResult> result = new List<GetFavBuyerResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetFavBuyers";

                    DbParameter sellerIdParameter = cmd.CreateParameter();
                    sellerIdParameter.ParameterName = "sellerId";
                    sellerIdParameter.Direction = ParameterDirection.Input;
                    sellerIdParameter.DbType = DbType.Int64;
                    sellerIdParameter.Precision = 19;
                    sellerIdParameter.Scale = 0;
                    if (sellerId.HasValue)
                    {
                        sellerIdParameter.Value = sellerId.Value;
                    }
                    else
                    {
                        sellerIdParameter.Size = -1;
                        sellerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sellerIdParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetFavBuyerResult row = new GetFavBuyerResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.BuyerId = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("BuyerId") && !reader.IsDBNull(reader.GetOrdinal("BuyerId")))
                            {
                                row.BuyerId = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"BuyerId")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<GetInterestedItemResult> GetInterestedItem(long? buyerId)
        {

            List<GetInterestedItemResult> result = new List<GetInterestedItemResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetInterestedItems";

                    DbParameter buyerIdParameter = cmd.CreateParameter();
                    buyerIdParameter.ParameterName = "buyerId";
                    buyerIdParameter.Direction = ParameterDirection.Input;
                    buyerIdParameter.DbType = DbType.Int64;
                    buyerIdParameter.Precision = 19;
                    buyerIdParameter.Scale = 0;
                    if (buyerId.HasValue)
                    {
                        buyerIdParameter.Value = buyerId.Value;
                    }
                    else
                    {
                        buyerIdParameter.Size = -1;
                        buyerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(buyerIdParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetInterestedItemResult row = new GetInterestedItemResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.ItemId = (int)Convert.ChangeType(reader.GetValue(0), typeof(int));
                            }
                            else
                            if (fieldNames.Contains("ItemId") && !reader.IsDBNull(reader.GetOrdinal("ItemId")))
                            {
                                row.ItemId = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ItemId")), typeof(int));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetInterestedItemResult>> GetInterestedItemAsync(long? buyerId)
        {

            List<GetInterestedItemResult> result = new List<GetInterestedItemResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetInterestedItems";

                    DbParameter buyerIdParameter = cmd.CreateParameter();
                    buyerIdParameter.ParameterName = "buyerId";
                    buyerIdParameter.Direction = ParameterDirection.Input;
                    buyerIdParameter.DbType = DbType.Int64;
                    buyerIdParameter.Precision = 19;
                    buyerIdParameter.Scale = 0;
                    if (buyerId.HasValue)
                    {
                        buyerIdParameter.Value = buyerId.Value;
                    }
                    else
                    {
                        buyerIdParameter.Size = -1;
                        buyerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(buyerIdParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetInterestedItemResult row = new GetInterestedItemResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.ItemId = (int)Convert.ChangeType(reader.GetValue(0), typeof(int));
                            }
                            else
                            if (fieldNames.Contains("ItemId") && !reader.IsDBNull(reader.GetOrdinal("ItemId")))
                            {
                                row.ItemId = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ItemId")), typeof(int));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<GetAdsCityResult> GetItemAd(int? itemId, int? max)
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetItemAds";

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter maxParameter = cmd.CreateParameter();
                    maxParameter.ParameterName = "max";
                    maxParameter.Direction = ParameterDirection.Input;
                    maxParameter.DbType = DbType.Int32;
                    maxParameter.Precision = 10;
                    maxParameter.Scale = 0;
                    if (max.HasValue)
                    {
                        maxParameter.Value = max.Value;
                    }
                    else
                    {
                        maxParameter.Size = -1;
                        maxParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(maxParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetAdsCityResult>> GetItemAdAsync(int? itemId, int? max)
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetItemAds";

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter maxParameter = cmd.CreateParameter();
                    maxParameter.ParameterName = "max";
                    maxParameter.Direction = ParameterDirection.Input;
                    maxParameter.DbType = DbType.Int32;
                    maxParameter.Precision = 10;
                    maxParameter.Scale = 0;
                    if (max.HasValue)
                    {
                        maxParameter.Value = max.Value;
                    }
                    else
                    {
                        maxParameter.Size = -1;
                        maxParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(maxParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<GetAgroItem1Result> GetItemsCat(short? catId)
        {

            List<GetAgroItem1Result> result = new List<GetAgroItem1Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetItemsCat";

                    DbParameter catIdParameter = cmd.CreateParameter();
                    catIdParameter.ParameterName = "catId";
                    catIdParameter.Direction = ParameterDirection.Input;
                    catIdParameter.DbType = DbType.Int16;
                    catIdParameter.Precision = 5;
                    catIdParameter.Scale = 0;
                    if (catId.HasValue)
                    {
                        catIdParameter.Value = catId.Value;
                    }
                    else
                    {
                        catIdParameter.Size = -1;
                        catIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(catIdParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAgroItem1Result row = new GetAgroItem1Result();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (int)Convert.ChangeType(reader.GetValue(0), typeof(int));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetAgroItem1Result>> GetItemsCatAsync(short? catId)
        {

            List<GetAgroItem1Result> result = new List<GetAgroItem1Result>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetItemsCat";

                    DbParameter catIdParameter = cmd.CreateParameter();
                    catIdParameter.ParameterName = "catId";
                    catIdParameter.Direction = ParameterDirection.Input;
                    catIdParameter.DbType = DbType.Int16;
                    catIdParameter.Precision = 5;
                    catIdParameter.Scale = 0;
                    if (catId.HasValue)
                    {
                        catIdParameter.Value = catId.Value;
                    }
                    else
                    {
                        catIdParameter.Size = -1;
                        catIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(catIdParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAgroItem1Result row = new GetAgroItem1Result();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (int)Convert.ChangeType(reader.GetValue(0), typeof(int));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(int));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<GetAdsCityResult> GetPostedAdvertisment(long? sellerId, System.DateTime? startDate, System.DateTime? endDate)
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetPostedAdvertisments";

                    DbParameter sellerIdParameter = cmd.CreateParameter();
                    sellerIdParameter.ParameterName = "sellerId";
                    sellerIdParameter.Direction = ParameterDirection.Input;
                    sellerIdParameter.DbType = DbType.Int64;
                    sellerIdParameter.Precision = 19;
                    sellerIdParameter.Scale = 0;
                    if (sellerId.HasValue)
                    {
                        sellerIdParameter.Value = sellerId.Value;
                    }
                    else
                    {
                        sellerIdParameter.Size = -1;
                        sellerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sellerIdParameter);

                    DbParameter startDateParameter = cmd.CreateParameter();
                    startDateParameter.ParameterName = "startDate";
                    startDateParameter.Direction = ParameterDirection.Input;
                    startDateParameter.DbType = DbType.DateTime;
                    if (startDate.HasValue)
                    {
                        startDateParameter.Value = startDate.Value;
                    }
                    else
                    {
                        startDateParameter.Size = -1;
                        startDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startDateParameter);

                    DbParameter endDateParameter = cmd.CreateParameter();
                    endDateParameter.ParameterName = "endDate";
                    endDateParameter.Direction = ParameterDirection.Input;
                    endDateParameter.DbType = DbType.DateTime;
                    if (endDate.HasValue)
                    {
                        endDateParameter.Value = endDate.Value;
                    }
                    else
                    {
                        endDateParameter.Size = -1;
                        endDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(endDateParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetAdsCityResult>> GetPostedAdvertismentAsync(long? sellerId, System.DateTime? startDate, System.DateTime? endDate)
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetPostedAdvertisments";

                    DbParameter sellerIdParameter = cmd.CreateParameter();
                    sellerIdParameter.ParameterName = "sellerId";
                    sellerIdParameter.Direction = ParameterDirection.Input;
                    sellerIdParameter.DbType = DbType.Int64;
                    sellerIdParameter.Precision = 19;
                    sellerIdParameter.Scale = 0;
                    if (sellerId.HasValue)
                    {
                        sellerIdParameter.Value = sellerId.Value;
                    }
                    else
                    {
                        sellerIdParameter.Size = -1;
                        sellerIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(sellerIdParameter);

                    DbParameter startDateParameter = cmd.CreateParameter();
                    startDateParameter.ParameterName = "startDate";
                    startDateParameter.Direction = ParameterDirection.Input;
                    startDateParameter.DbType = DbType.DateTime;
                    if (startDate.HasValue)
                    {
                        startDateParameter.Value = startDate.Value;
                    }
                    else
                    {
                        startDateParameter.Size = -1;
                        startDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startDateParameter);

                    DbParameter endDateParameter = cmd.CreateParameter();
                    endDateParameter.ParameterName = "endDate";
                    endDateParameter.Direction = ParameterDirection.Input;
                    endDateParameter.DbType = DbType.DateTime;
                    if (endDate.HasValue)
                    {
                        endDateParameter.Value = endDate.Value;
                    }
                    else
                    {
                        endDateParameter.Size = -1;
                        endDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(endDateParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<GetAdsCityResult> GetSeller()
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetSellers";
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetAdsCityResult>> GetSellerAsync()
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetSellers";
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<USER> GetUser(long? id)
        {

            List<USER> result = new List<USER>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetUser";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int64;
                    idParameter.Precision = 19;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            USER row = new USER();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            if (fieldNames.Contains("FName") && !reader.IsDBNull(reader.GetOrdinal("FName")))
                            {
                                row.FName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FName")), typeof(string));
                            }

                            if (fieldNames.Contains("LName") && !reader.IsDBNull(reader.GetOrdinal("LName")))
                            {
                                row.LName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"LName")), typeof(string));
                            }

                            if (fieldNames.Contains("CCompanyCode") && !reader.IsDBNull(reader.GetOrdinal("CCompanyCode")))
                            {
                                row.CCompanyCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CCompanyCode")), typeof(string));
                            }

                            if (fieldNames.Contains("CCountryCode") && !reader.IsDBNull(reader.GetOrdinal("CCountryCode")))
                            {
                                row.CCountryCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CCountryCode")), typeof(string));
                            }

                            if (fieldNames.Contains("CPhone") && !reader.IsDBNull(reader.GetOrdinal("CPhone")))
                            {
                                row.CPhone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CPhone")), typeof(string));
                            }

                            if (fieldNames.Contains("Address") && !reader.IsDBNull(reader.GetOrdinal("Address")))
                            {
                                row.Address = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Address")), typeof(string));
                            }

                            if (fieldNames.Contains("GLat") && !reader.IsDBNull(reader.GetOrdinal("GLat")))
                            {
                                row.GLat = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"GLat")), typeof(decimal));
                            }
                            else
                            {
                                row.GLat = null;
                            }

                            if (fieldNames.Contains("GLng") && !reader.IsDBNull(reader.GetOrdinal("GLng")))
                            {
                                row.GLng = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"GLng")), typeof(decimal));
                            }
                            else
                            {
                                row.GLng = null;
                            }

                            if (fieldNames.Contains("BuyerFlag") && !reader.IsDBNull(reader.GetOrdinal("BuyerFlag")))
                            {
                                row.BuyerFlag = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"BuyerFlag")), typeof(bool));
                            }

                            if (fieldNames.Contains("SellerFlag") && !reader.IsDBNull(reader.GetOrdinal("SellerFlag")))
                            {
                                row.SellerFlag = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SellerFlag")), typeof(bool));
                            }

                            if (fieldNames.Contains("CityId") && !reader.IsDBNull(reader.GetOrdinal("CityId")))
                            {
                                row.City.Id = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CityId")), typeof(short));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<USER>> GetUserAsync(long? id)
        {

            List<USER> result = new List<USER>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetUser";

                    DbParameter idParameter = cmd.CreateParameter();
                    idParameter.ParameterName = "id";
                    idParameter.Direction = ParameterDirection.Input;
                    idParameter.DbType = DbType.Int64;
                    idParameter.Precision = 19;
                    idParameter.Scale = 0;
                    if (id.HasValue)
                    {
                        idParameter.Value = id.Value;
                    }
                    else
                    {
                        idParameter.Size = -1;
                        idParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(idParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            USER row = new USER();
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            if (fieldNames.Contains("FName") && !reader.IsDBNull(reader.GetOrdinal("FName")))
                            {
                                row.FName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FName")), typeof(string));
                            }

                            if (fieldNames.Contains("LName") && !reader.IsDBNull(reader.GetOrdinal("LName")))
                            {
                                row.LName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"LName")), typeof(string));
                            }

                            if (fieldNames.Contains("CCompanyCode") && !reader.IsDBNull(reader.GetOrdinal("CCompanyCode")))
                            {
                                row.CCompanyCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CCompanyCode")), typeof(string));
                            }

                            if (fieldNames.Contains("CCountryCode") && !reader.IsDBNull(reader.GetOrdinal("CCountryCode")))
                            {
                                row.CCountryCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CCountryCode")), typeof(string));
                            }

                            if (fieldNames.Contains("CPhone") && !reader.IsDBNull(reader.GetOrdinal("CPhone")))
                            {
                                row.CPhone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CPhone")), typeof(string));
                            }

                            if (fieldNames.Contains("Address") && !reader.IsDBNull(reader.GetOrdinal("Address")))
                            {
                                row.Address = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Address")), typeof(string));
                            }

                            if (fieldNames.Contains("GLat") && !reader.IsDBNull(reader.GetOrdinal("GLat")))
                            {
                                row.GLat = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"GLat")), typeof(decimal));
                            }
                            else
                            {
                                row.GLat = null;
                            }

                            if (fieldNames.Contains("GLng") && !reader.IsDBNull(reader.GetOrdinal("GLng")))
                            {
                                row.GLng = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"GLng")), typeof(decimal));
                            }
                            else
                            {
                                row.GLng = null;
                            }

                            if (fieldNames.Contains("BuyerFlag") && !reader.IsDBNull(reader.GetOrdinal("BuyerFlag")))
                            {
                                row.BuyerFlag = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"BuyerFlag")), typeof(bool));
                            }

                            if (fieldNames.Contains("SellerFlag") && !reader.IsDBNull(reader.GetOrdinal("SellerFlag")))
                            {
                                row.SellerFlag = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SellerFlag")), typeof(bool));
                            }

                            if (fieldNames.Contains("CityId") && !reader.IsDBNull(reader.GetOrdinal("CityId")))
                            {
                                row.City.Id = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CityId")), typeof(short));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<GetAdsCityResult> GetUserByContact(string countryCode, string companyCode, string phone)
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetUserByContact";

                    DbParameter countryCodeParameter = cmd.CreateParameter();
                    countryCodeParameter.ParameterName = "countryCode";
                    countryCodeParameter.Direction = ParameterDirection.Input;
                    countryCodeParameter.DbType = DbType.String;
                    countryCodeParameter.Size = 6;
                    if (countryCode != null)
                    {
                        countryCodeParameter.Value = countryCode;
                    }
                    else
                    {
                        countryCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(countryCodeParameter);

                    DbParameter companyCodeParameter = cmd.CreateParameter();
                    companyCodeParameter.ParameterName = "companyCode";
                    companyCodeParameter.Direction = ParameterDirection.Input;
                    companyCodeParameter.DbType = DbType.String;
                    companyCodeParameter.Size = 6;
                    if (companyCode != null)
                    {
                        companyCodeParameter.Value = companyCode;
                    }
                    else
                    {
                        companyCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(companyCodeParameter);

                    DbParameter phoneParameter = cmd.CreateParameter();
                    phoneParameter.ParameterName = "phone";
                    phoneParameter.Direction = ParameterDirection.Input;
                    phoneParameter.DbType = DbType.String;
                    phoneParameter.Size = 14;
                    if (phone != null)
                    {
                        phoneParameter.Value = phone;
                    }
                    else
                    {
                        phoneParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(phoneParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }
        internal long GetIdentityUserId(string identityId)
        {
            var result = long.Parse("0");
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetIdentityUserId";

                    DbParameter countryCodeParameter = cmd.CreateParameter();
                    countryCodeParameter.ParameterName = "identityId";
                    countryCodeParameter.Direction = ParameterDirection.Input;
                    countryCodeParameter.DbType = DbType.String;
                    if (identityId != null)
                    {
                        countryCodeParameter.Value = identityId;
                    }
                    else
                    {
                        countryCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(countryCodeParameter);

                    result = Convert.ToInt64(cmd.ExecuteScalar());
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetAdsCityResult>> GetUserByContactAsync(string countryCode, string companyCode, string phone)
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetUserByContact";

                    DbParameter countryCodeParameter = cmd.CreateParameter();
                    countryCodeParameter.ParameterName = "countryCode";
                    countryCodeParameter.Direction = ParameterDirection.Input;
                    countryCodeParameter.DbType = DbType.String;
                    countryCodeParameter.Size = 6;
                    if (countryCode != null)
                    {
                        countryCodeParameter.Value = countryCode;
                    }
                    else
                    {
                        countryCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(countryCodeParameter);

                    DbParameter companyCodeParameter = cmd.CreateParameter();
                    companyCodeParameter.ParameterName = "companyCode";
                    companyCodeParameter.Direction = ParameterDirection.Input;
                    companyCodeParameter.DbType = DbType.String;
                    companyCodeParameter.Size = 6;
                    if (companyCode != null)
                    {
                        companyCodeParameter.Value = companyCode;
                    }
                    else
                    {
                        companyCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(companyCodeParameter);

                    DbParameter phoneParameter = cmd.CreateParameter();
                    phoneParameter.ParameterName = "phone";
                    phoneParameter.Direction = ParameterDirection.Input;
                    phoneParameter.DbType = DbType.String;
                    phoneParameter.Size = 14;
                    if (phone != null)
                    {
                        phoneParameter.Value = phone;
                    }
                    else
                    {
                        phoneParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(phoneParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal List<GetAdsCityResult> GetUsersCity(short? cityId)
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetUsersCity";

                    DbParameter cityIdParameter = cmd.CreateParameter();
                    cityIdParameter.ParameterName = "cityId";
                    cityIdParameter.Direction = ParameterDirection.Input;
                    cityIdParameter.DbType = DbType.Int16;
                    cityIdParameter.Precision = 5;
                    cityIdParameter.Scale = 0;
                    if (cityId.HasValue)
                    {
                        cityIdParameter.Value = cityId.Value;
                    }
                    else
                    {
                        cityIdParameter.Size = -1;
                        cityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cityIdParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal async Task<List<GetAdsCityResult>> GetUsersCityAsync(short? cityId)
        {

            List<GetAdsCityResult> result = new List<GetAdsCityResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetUsersCity";

                    DbParameter cityIdParameter = cmd.CreateParameter();
                    cityIdParameter.ParameterName = "cityId";
                    cityIdParameter.Direction = ParameterDirection.Input;
                    cityIdParameter.DbType = DbType.Int16;
                    cityIdParameter.Precision = 5;
                    cityIdParameter.Scale = 0;
                    if (cityId.HasValue)
                    {
                        cityIdParameter.Value = cityId.Value;
                    }
                    else
                    {
                        cityIdParameter.Size = -1;
                        cityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cityIdParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetAdsCityResult row = new GetAdsCityResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(0), typeof(long));
                            }
                            else
                            if (fieldNames.Contains("Id") && !reader.IsDBNull(reader.GetOrdinal("Id")))
                            {
                                row.Id = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Id")), typeof(long));
                            }

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
            return result;
        }

        internal void MakeBuyer(long? userId)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.MakeBuyer";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task MakeBuyerAsync(long? userId)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.MakeBuyer";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void MakeSeller(long? userId)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.MakeSeller";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task MakeSellerAsync(long? userId)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.MakeSeller";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void UpdateCategoryName(short? catId, string name)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateCategoryName";

                    DbParameter catIdParameter = cmd.CreateParameter();
                    catIdParameter.ParameterName = "catId";
                    catIdParameter.Direction = ParameterDirection.Input;
                    catIdParameter.DbType = DbType.Int16;
                    catIdParameter.Precision = 5;
                    catIdParameter.Scale = 0;
                    if (catId.HasValue)
                    {
                        catIdParameter.Value = catId.Value;
                    }
                    else
                    {
                        catIdParameter.Size = -1;
                        catIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(catIdParameter);

                    DbParameter nameParameter = cmd.CreateParameter();
                    nameParameter.ParameterName = "name";
                    nameParameter.Direction = ParameterDirection.Input;
                    nameParameter.DbType = DbType.String;
                    if (name != null)
                    {
                        nameParameter.Value = name;
                    }
                    else
                    {
                        nameParameter.Size = -1;
                        nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nameParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task UpdateCategoryNameAsync(short? catId, string name)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateCategoryName";

                    DbParameter catIdParameter = cmd.CreateParameter();
                    catIdParameter.ParameterName = "catId";
                    catIdParameter.Direction = ParameterDirection.Input;
                    catIdParameter.DbType = DbType.Int16;
                    catIdParameter.Precision = 5;
                    catIdParameter.Scale = 0;
                    if (catId.HasValue)
                    {
                        catIdParameter.Value = catId.Value;
                    }
                    else
                    {
                        catIdParameter.Size = -1;
                        catIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(catIdParameter);

                    DbParameter nameParameter = cmd.CreateParameter();
                    nameParameter.ParameterName = "name";
                    nameParameter.Direction = ParameterDirection.Input;
                    nameParameter.DbType = DbType.String;
                    if (name != null)
                    {
                        nameParameter.Value = name;
                    }
                    else
                    {
                        nameParameter.Size = -1;
                        nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nameParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void UpdateCategoryUName(short? catId, string uName)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateCategoryUName";

                    DbParameter catIdParameter = cmd.CreateParameter();
                    catIdParameter.ParameterName = "catId";
                    catIdParameter.Direction = ParameterDirection.Input;
                    catIdParameter.DbType = DbType.Int16;
                    catIdParameter.Precision = 5;
                    catIdParameter.Scale = 0;
                    if (catId.HasValue)
                    {
                        catIdParameter.Value = catId.Value;
                    }
                    else
                    {
                        catIdParameter.Size = -1;
                        catIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(catIdParameter);

                    DbParameter uNameParameter = cmd.CreateParameter();
                    uNameParameter.ParameterName = "uName";
                    uNameParameter.Direction = ParameterDirection.Input;
                    uNameParameter.DbType = DbType.String;
                    if (uName != null)
                    {
                        uNameParameter.Value = uName;
                    }
                    else
                    {
                        uNameParameter.Size = -1;
                        uNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(uNameParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task UpdateCategoryUNameAsync(short? catId, string uName)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateCategoryUName";

                    DbParameter catIdParameter = cmd.CreateParameter();
                    catIdParameter.ParameterName = "catId";
                    catIdParameter.Direction = ParameterDirection.Input;
                    catIdParameter.DbType = DbType.Int16;
                    catIdParameter.Precision = 5;
                    catIdParameter.Scale = 0;
                    if (catId.HasValue)
                    {
                        catIdParameter.Value = catId.Value;
                    }
                    else
                    {
                        catIdParameter.Size = -1;
                        catIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(catIdParameter);

                    DbParameter uNameParameter = cmd.CreateParameter();
                    uNameParameter.ParameterName = "uName";
                    uNameParameter.Direction = ParameterDirection.Input;
                    uNameParameter.DbType = DbType.String;
                    if (uName != null)
                    {
                        uNameParameter.Value = uName;
                    }
                    else
                    {
                        uNameParameter.Size = -1;
                        uNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(uNameParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void UpdateCityGeoLocation(short? cityId, decimal? lat, decimal? lng)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateCityGeoLocation";

                    DbParameter cityIdParameter = cmd.CreateParameter();
                    cityIdParameter.ParameterName = "cityId";
                    cityIdParameter.Direction = ParameterDirection.Input;
                    cityIdParameter.DbType = DbType.Int16;
                    cityIdParameter.Precision = 5;
                    cityIdParameter.Scale = 0;
                    if (cityId.HasValue)
                    {
                        cityIdParameter.Value = cityId.Value;
                    }
                    else
                    {
                        cityIdParameter.Size = -1;
                        cityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cityIdParameter);

                    DbParameter latParameter = cmd.CreateParameter();
                    latParameter.ParameterName = "lat";
                    latParameter.Direction = ParameterDirection.Input;
                    latParameter.DbType = DbType.Decimal;
                    latParameter.Precision = 10;
                    latParameter.Scale = 8;
                    if (lat.HasValue)
                    {
                        latParameter.Value = lat.Value;
                    }
                    else
                    {
                        latParameter.Size = -1;
                        latParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(latParameter);

                    DbParameter lngParameter = cmd.CreateParameter();
                    lngParameter.ParameterName = "lng";
                    lngParameter.Direction = ParameterDirection.Input;
                    lngParameter.DbType = DbType.Decimal;
                    lngParameter.Precision = 11;
                    lngParameter.Scale = 8;
                    if (lng.HasValue)
                    {
                        lngParameter.Value = lng.Value;
                    }
                    else
                    {
                        lngParameter.Size = -1;
                        lngParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(lngParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task UpdateCityGeoLocationAsync(short? cityId, decimal? lat, decimal? lng)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateCityGeoLocation";

                    DbParameter cityIdParameter = cmd.CreateParameter();
                    cityIdParameter.ParameterName = "cityId";
                    cityIdParameter.Direction = ParameterDirection.Input;
                    cityIdParameter.DbType = DbType.Int16;
                    cityIdParameter.Precision = 5;
                    cityIdParameter.Scale = 0;
                    if (cityId.HasValue)
                    {
                        cityIdParameter.Value = cityId.Value;
                    }
                    else
                    {
                        cityIdParameter.Size = -1;
                        cityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cityIdParameter);

                    DbParameter latParameter = cmd.CreateParameter();
                    latParameter.ParameterName = "lat";
                    latParameter.Direction = ParameterDirection.Input;
                    latParameter.DbType = DbType.Decimal;
                    latParameter.Precision = 10;
                    latParameter.Scale = 8;
                    if (lat.HasValue)
                    {
                        latParameter.Value = lat.Value;
                    }
                    else
                    {
                        latParameter.Size = -1;
                        latParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(latParameter);

                    DbParameter lngParameter = cmd.CreateParameter();
                    lngParameter.ParameterName = "lng";
                    lngParameter.Direction = ParameterDirection.Input;
                    lngParameter.DbType = DbType.Decimal;
                    lngParameter.Precision = 11;
                    lngParameter.Scale = 8;
                    if (lng.HasValue)
                    {
                        lngParameter.Value = lng.Value;
                    }
                    else
                    {
                        lngParameter.Size = -1;
                        lngParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(lngParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void UpdateCityName(short? cityId, string name)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateCityName";

                    DbParameter cityIdParameter = cmd.CreateParameter();
                    cityIdParameter.ParameterName = "cityId";
                    cityIdParameter.Direction = ParameterDirection.Input;
                    cityIdParameter.DbType = DbType.Int16;
                    cityIdParameter.Precision = 5;
                    cityIdParameter.Scale = 0;
                    if (cityId.HasValue)
                    {
                        cityIdParameter.Value = cityId.Value;
                    }
                    else
                    {
                        cityIdParameter.Size = -1;
                        cityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cityIdParameter);

                    DbParameter nameParameter = cmd.CreateParameter();
                    nameParameter.ParameterName = "name";
                    nameParameter.Direction = ParameterDirection.Input;
                    nameParameter.DbType = DbType.String;
                    nameParameter.Size = 50;
                    if (name != null)
                    {
                        nameParameter.Value = name;
                    }
                    else
                    {
                        nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nameParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task UpdateCityNameAsync(short? cityId, string name)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateCityName";

                    DbParameter cityIdParameter = cmd.CreateParameter();
                    cityIdParameter.ParameterName = "cityId";
                    cityIdParameter.Direction = ParameterDirection.Input;
                    cityIdParameter.DbType = DbType.Int16;
                    cityIdParameter.Precision = 5;
                    cityIdParameter.Scale = 0;
                    if (cityId.HasValue)
                    {
                        cityIdParameter.Value = cityId.Value;
                    }
                    else
                    {
                        cityIdParameter.Size = -1;
                        cityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cityIdParameter);

                    DbParameter nameParameter = cmd.CreateParameter();
                    nameParameter.ParameterName = "name";
                    nameParameter.Direction = ParameterDirection.Input;
                    nameParameter.DbType = DbType.String;
                    nameParameter.Size = 50;
                    if (name != null)
                    {
                        nameParameter.Value = name;
                    }
                    else
                    {
                        nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nameParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void UpdateItemCategory(int? itemId, short? catId)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateItemCategory";

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter catIdParameter = cmd.CreateParameter();
                    catIdParameter.ParameterName = "catId";
                    catIdParameter.Direction = ParameterDirection.Input;
                    catIdParameter.DbType = DbType.Int16;
                    catIdParameter.Precision = 5;
                    catIdParameter.Scale = 0;
                    if (catId.HasValue)
                    {
                        catIdParameter.Value = catId.Value;
                    }
                    else
                    {
                        catIdParameter.Size = -1;
                        catIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(catIdParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task UpdateItemCategoryAsync(int? itemId, short? catId)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateItemCategory";

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter catIdParameter = cmd.CreateParameter();
                    catIdParameter.ParameterName = "catId";
                    catIdParameter.Direction = ParameterDirection.Input;
                    catIdParameter.DbType = DbType.Int16;
                    catIdParameter.Precision = 5;
                    catIdParameter.Scale = 0;
                    if (catId.HasValue)
                    {
                        catIdParameter.Value = catId.Value;
                    }
                    else
                    {
                        catIdParameter.Size = -1;
                        catIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(catIdParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void UpdateItemName(int? itemId, string name)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateItemName";

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter nameParameter = cmd.CreateParameter();
                    nameParameter.ParameterName = "name";
                    nameParameter.Direction = ParameterDirection.Input;
                    nameParameter.DbType = DbType.String;
                    nameParameter.Size = 50;
                    if (name != null)
                    {
                        nameParameter.Value = name;
                    }
                    else
                    {
                        nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nameParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task UpdateItemNameAsync(int? itemId, string name)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateItemName";

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter nameParameter = cmd.CreateParameter();
                    nameParameter.ParameterName = "name";
                    nameParameter.Direction = ParameterDirection.Input;
                    nameParameter.DbType = DbType.String;
                    nameParameter.Size = 50;
                    if (name != null)
                    {
                        nameParameter.Value = name;
                    }
                    else
                    {
                        nameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nameParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void UpdateItemUName(int? itemId, string uName)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateItemUName";

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter uNameParameter = cmd.CreateParameter();
                    uNameParameter.ParameterName = "uName";
                    uNameParameter.Direction = ParameterDirection.Input;
                    uNameParameter.DbType = DbType.String;
                    uNameParameter.Size = 50;
                    if (uName != null)
                    {
                        uNameParameter.Value = uName;
                    }
                    else
                    {
                        uNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(uNameParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task UpdateItemUNameAsync(int? itemId, string uName)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateItemUName";

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter uNameParameter = cmd.CreateParameter();
                    uNameParameter.ParameterName = "uName";
                    uNameParameter.Direction = ParameterDirection.Input;
                    uNameParameter.DbType = DbType.String;
                    uNameParameter.Size = 50;
                    if (uName != null)
                    {
                        uNameParameter.Value = uName;
                    }
                    else
                    {
                        uNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(uNameParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void UpdateItemUWeightScale(int? itemId, string uScale)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateItemUWeightScale";

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter uScaleParameter = cmd.CreateParameter();
                    uScaleParameter.ParameterName = "uScale";
                    uScaleParameter.Direction = ParameterDirection.Input;
                    uScaleParameter.DbType = DbType.String;
                    uScaleParameter.Size = 20;
                    if (uScale != null)
                    {
                        uScaleParameter.Value = uScale;
                    }
                    else
                    {
                        uScaleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(uScaleParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task UpdateItemUWeightScaleAsync(int? itemId, string uScale)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateItemUWeightScale";

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter uScaleParameter = cmd.CreateParameter();
                    uScaleParameter.ParameterName = "uScale";
                    uScaleParameter.Direction = ParameterDirection.Input;
                    uScaleParameter.DbType = DbType.String;
                    uScaleParameter.Size = 20;
                    if (uScale != null)
                    {
                        uScaleParameter.Value = uScale;
                    }
                    else
                    {
                        uScaleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(uScaleParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void UpdateItemWeightScale(int? itemId, string scale)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateItemWeightScale";

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter scaleParameter = cmd.CreateParameter();
                    scaleParameter.ParameterName = "scale";
                    scaleParameter.Direction = ParameterDirection.Input;
                    scaleParameter.DbType = DbType.String;
                    scaleParameter.Size = 20;
                    if (scale != null)
                    {
                        scaleParameter.Value = scale;
                    }
                    else
                    {
                        scaleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(scaleParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task UpdateItemWeightScaleAsync(int? itemId, string scale)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateItemWeightScale";

                    DbParameter itemIdParameter = cmd.CreateParameter();
                    itemIdParameter.ParameterName = "itemId";
                    itemIdParameter.Direction = ParameterDirection.Input;
                    itemIdParameter.DbType = DbType.Int32;
                    itemIdParameter.Precision = 10;
                    itemIdParameter.Scale = 0;
                    if (itemId.HasValue)
                    {
                        itemIdParameter.Value = itemId.Value;
                    }
                    else
                    {
                        itemIdParameter.Size = -1;
                        itemIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(itemIdParameter);

                    DbParameter scaleParameter = cmd.CreateParameter();
                    scaleParameter.ParameterName = "scale";
                    scaleParameter.Direction = ParameterDirection.Input;
                    scaleParameter.DbType = DbType.String;
                    scaleParameter.Size = 20;
                    if (scale != null)
                    {
                        scaleParameter.Value = scale;
                    }
                    else
                    {
                        scaleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(scaleParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void UpdateUserAddress(long? userId, string address)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateUserAddress";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);

                    DbParameter addressParameter = cmd.CreateParameter();
                    addressParameter.ParameterName = "address";
                    addressParameter.Direction = ParameterDirection.Input;
                    addressParameter.DbType = DbType.String;
                    if (address != null)
                    {
                        addressParameter.Value = address;
                    }
                    else
                    {
                        addressParameter.Size = -1;
                        addressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(addressParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task UpdateUserAddressAsync(long? userId, string address)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateUserAddress";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);

                    DbParameter addressParameter = cmd.CreateParameter();
                    addressParameter.ParameterName = "address";
                    addressParameter.Direction = ParameterDirection.Input;
                    addressParameter.DbType = DbType.String;
                    if (address != null)
                    {
                        addressParameter.Value = address;
                    }
                    else
                    {
                        addressParameter.Size = -1;
                        addressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(addressParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void UpdateUserCity(long? userId, short? cityId)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateUserCity";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);

                    DbParameter cityIdParameter = cmd.CreateParameter();
                    cityIdParameter.ParameterName = "cityId";
                    cityIdParameter.Direction = ParameterDirection.Input;
                    cityIdParameter.DbType = DbType.Int16;
                    cityIdParameter.Precision = 5;
                    cityIdParameter.Scale = 0;
                    if (cityId.HasValue)
                    {
                        cityIdParameter.Value = cityId.Value;
                    }
                    else
                    {
                        cityIdParameter.Size = -1;
                        cityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cityIdParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task UpdateUserCityAsync(long? userId, short? cityId)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateUserCity";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);

                    DbParameter cityIdParameter = cmd.CreateParameter();
                    cityIdParameter.ParameterName = "cityId";
                    cityIdParameter.Direction = ParameterDirection.Input;
                    cityIdParameter.DbType = DbType.Int16;
                    cityIdParameter.Precision = 5;
                    cityIdParameter.Scale = 0;
                    if (cityId.HasValue)
                    {
                        cityIdParameter.Value = cityId.Value;
                    }
                    else
                    {
                        cityIdParameter.Size = -1;
                        cityIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(cityIdParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void UpdateUserContact(long? userId, string countryCode, string comapnyCode, string phone)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateUserContact";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);

                    DbParameter countryCodeParameter = cmd.CreateParameter();
                    countryCodeParameter.ParameterName = "countryCode";
                    countryCodeParameter.Direction = ParameterDirection.Input;
                    countryCodeParameter.DbType = DbType.String;
                    countryCodeParameter.Size = 6;
                    if (countryCode != null)
                    {
                        countryCodeParameter.Value = countryCode;
                    }
                    else
                    {
                        countryCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(countryCodeParameter);

                    DbParameter comapnyCodeParameter = cmd.CreateParameter();
                    comapnyCodeParameter.ParameterName = "comapnyCode";
                    comapnyCodeParameter.Direction = ParameterDirection.Input;
                    comapnyCodeParameter.DbType = DbType.String;
                    comapnyCodeParameter.Size = 6;
                    if (comapnyCode != null)
                    {
                        comapnyCodeParameter.Value = comapnyCode;
                    }
                    else
                    {
                        comapnyCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(comapnyCodeParameter);

                    DbParameter phoneParameter = cmd.CreateParameter();
                    phoneParameter.ParameterName = "phone";
                    phoneParameter.Direction = ParameterDirection.Input;
                    phoneParameter.DbType = DbType.String;
                    phoneParameter.Size = 14;
                    if (phone != null)
                    {
                        phoneParameter.Value = phone;
                    }
                    else
                    {
                        phoneParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(phoneParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task UpdateUserContactAsync(long? userId, string countryCode, string comapnyCode, string phone)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateUserContact";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);

                    DbParameter countryCodeParameter = cmd.CreateParameter();
                    countryCodeParameter.ParameterName = "countryCode";
                    countryCodeParameter.Direction = ParameterDirection.Input;
                    countryCodeParameter.DbType = DbType.String;
                    countryCodeParameter.Size = 6;
                    if (countryCode != null)
                    {
                        countryCodeParameter.Value = countryCode;
                    }
                    else
                    {
                        countryCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(countryCodeParameter);

                    DbParameter comapnyCodeParameter = cmd.CreateParameter();
                    comapnyCodeParameter.ParameterName = "comapnyCode";
                    comapnyCodeParameter.Direction = ParameterDirection.Input;
                    comapnyCodeParameter.DbType = DbType.String;
                    comapnyCodeParameter.Size = 6;
                    if (comapnyCode != null)
                    {
                        comapnyCodeParameter.Value = comapnyCode;
                    }
                    else
                    {
                        comapnyCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(comapnyCodeParameter);

                    DbParameter phoneParameter = cmd.CreateParameter();
                    phoneParameter.ParameterName = "phone";
                    phoneParameter.Direction = ParameterDirection.Input;
                    phoneParameter.DbType = DbType.String;
                    phoneParameter.Size = 14;
                    if (phone != null)
                    {
                        phoneParameter.Value = phone;
                    }
                    else
                    {
                        phoneParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(phoneParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void UpdateUserLocation(long? userId, decimal? lat, decimal? lng)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateUserLocation";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);

                    DbParameter latParameter = cmd.CreateParameter();
                    latParameter.ParameterName = "lat";
                    latParameter.Direction = ParameterDirection.Input;
                    latParameter.DbType = DbType.Decimal;
                    latParameter.Precision = 10;
                    latParameter.Scale = 8;
                    if (lat.HasValue)
                    {
                        latParameter.Value = lat.Value;
                    }
                    else
                    {
                        latParameter.Size = -1;
                        latParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(latParameter);

                    DbParameter lngParameter = cmd.CreateParameter();
                    lngParameter.ParameterName = "lng";
                    lngParameter.Direction = ParameterDirection.Input;
                    lngParameter.DbType = DbType.Decimal;
                    lngParameter.Precision = 11;
                    lngParameter.Scale = 8;
                    if (lng.HasValue)
                    {
                        lngParameter.Value = lng.Value;
                    }
                    else
                    {
                        lngParameter.Size = -1;
                        lngParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(lngParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task UpdateUserLocationAsync(long? userId, decimal? lat, decimal? lng)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateUserLocation";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);

                    DbParameter latParameter = cmd.CreateParameter();
                    latParameter.ParameterName = "lat";
                    latParameter.Direction = ParameterDirection.Input;
                    latParameter.DbType = DbType.Decimal;
                    latParameter.Precision = 10;
                    latParameter.Scale = 8;
                    if (lat.HasValue)
                    {
                        latParameter.Value = lat.Value;
                    }
                    else
                    {
                        latParameter.Size = -1;
                        latParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(latParameter);

                    DbParameter lngParameter = cmd.CreateParameter();
                    lngParameter.ParameterName = "lng";
                    lngParameter.Direction = ParameterDirection.Input;
                    lngParameter.DbType = DbType.Decimal;
                    lngParameter.Precision = 11;
                    lngParameter.Scale = 8;
                    if (lng.HasValue)
                    {
                        lngParameter.Value = lng.Value;
                    }
                    else
                    {
                        lngParameter.Size = -1;
                        lngParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(lngParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal void UpdateUserName(long? userId, string fName, string lName)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateUserName";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);

                    DbParameter fNameParameter = cmd.CreateParameter();
                    fNameParameter.ParameterName = "fName";
                    fNameParameter.Direction = ParameterDirection.Input;
                    fNameParameter.DbType = DbType.String;
                    if (fName != null)
                    {
                        fNameParameter.Value = fName;
                    }
                    else
                    {
                        fNameParameter.Size = -1;
                        fNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fNameParameter);

                    DbParameter lNameParameter = cmd.CreateParameter();
                    lNameParameter.ParameterName = "lName";
                    lNameParameter.Direction = ParameterDirection.Input;
                    lNameParameter.DbType = DbType.String;
                    if (lName != null)
                    {
                        lNameParameter.Value = lName;
                    }
                    else
                    {
                        lNameParameter.Size = -1;
                        lNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(lNameParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        internal async Task UpdateUserNameAsync(long? userId, string fName, string lName)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                    {
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    }

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.UpdateUserName";

                    DbParameter userIdParameter = cmd.CreateParameter();
                    userIdParameter.ParameterName = "userId";
                    userIdParameter.Direction = ParameterDirection.Input;
                    userIdParameter.DbType = DbType.Int64;
                    userIdParameter.Precision = 19;
                    userIdParameter.Scale = 0;
                    if (userId.HasValue)
                    {
                        userIdParameter.Value = userId.Value;
                    }
                    else
                    {
                        userIdParameter.Size = -1;
                        userIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(userIdParameter);

                    DbParameter fNameParameter = cmd.CreateParameter();
                    fNameParameter.ParameterName = "fName";
                    fNameParameter.Direction = ParameterDirection.Input;
                    fNameParameter.DbType = DbType.String;
                    if (fName != null)
                    {
                        fNameParameter.Value = fName;
                    }
                    else
                    {
                        fNameParameter.Size = -1;
                        fNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fNameParameter);

                    DbParameter lNameParameter = cmd.CreateParameter();
                    lNameParameter.ParameterName = "lName";
                    lNameParameter.Direction = ParameterDirection.Input;
                    lNameParameter.DbType = DbType.String;
                    if (lName != null)
                    {
                        lNameParameter.Value = lName;
                    }
                    else
                    {
                        lNameParameter.Size = -1;
                        lNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(lNameParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                {
                    connection.Close();
                }
            }
        }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.ADVERTISEMENTMapping(modelBuilder);
            this.CustomizeADVERTISEMENTMapping(modelBuilder);

            this.AGROITEMMapping(modelBuilder);
            this.CustomizeAGROITEMMapping(modelBuilder);

            this.BUYERADDSDIFFERENTADSTOFAVMapping(modelBuilder);
            this.CustomizeBUYERADDSDIFFERENTADSTOFAVMapping(modelBuilder);

            this.BUYERSADDAGROITEMTOINTERESTMapping(modelBuilder);
            this.CustomizeBUYERSADDAGROITEMTOINTERESTMapping(modelBuilder);

            this.CATEGORYMapping(modelBuilder);
            this.CustomizeCATEGORYMapping(modelBuilder);

            this.CITYMapping(modelBuilder);
            this.CustomizeCITYMapping(modelBuilder);

            this.SELLERSFAVORITESBUYERMapping(modelBuilder);
            this.CustomizeSELLERSFAVORITESBUYERMapping(modelBuilder);

            this.USERMapping(modelBuilder);
            this.CustomizeUSERMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region ADVERTISEMENT Mapping

        private void ADVERTISEMENTMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ADVERTISEMENT>().ToTable(@"ADVERTISEMENTS", @"dbo");
            modelBuilder.Entity<ADVERTISEMENT>().Property<long>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ADVERTISEMENT>().Property<short>(x => x.Quality).HasColumnName(@"Quality").HasColumnType(@"smallint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ADVERTISEMENT>().Property<short>(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType(@"smallint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ADVERTISEMENT>().Property<System.DateTime>(x => x.PostedDateTime).HasColumnName(@"PostedDateTime").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ADVERTISEMENT>().Property<decimal>(x => x.Price).HasColumnName(@"Price").HasColumnType(@"money").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ADVERTISEMENT>().Property<string>(x => x.Picture).HasColumnName(@"Picture").HasColumnType(@"varchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ADVERTISEMENT>().Property<long>(@"SellerId").HasColumnName(@"SellerId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ADVERTISEMENT>().Property<int>(@"ItemId").HasColumnName(@"ItemId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ADVERTISEMENT>().Property<short>(@"CityId").HasColumnName(@"CityId").HasColumnType(@"smallint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ADVERTISEMENT>().HasKey(@"Id");
        }

        partial void CustomizeADVERTISEMENTMapping(ModelBuilder modelBuilder);

        #endregion

        #region AGROITEM Mapping

        private void AGROITEMMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AGROITEM>().ToTable(@"AGRO_ITEMS", @"dbo");
            modelBuilder.Entity<AGROITEM>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<AGROITEM>().Property<string>(x => x.Name).HasColumnName(@"Name").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<AGROITEM>().Property<string>(x => x.Uname).HasColumnName(@"Uname").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<AGROITEM>().Property<string>(x => x.WeightScale).HasColumnName(@"WeightScale").HasColumnType(@"nchar(10)").IsRequired().ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<AGROITEM>().Property<string>(x => x.UWeightScale).HasColumnName(@"UWeightScale").HasColumnType(@"nchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<AGROITEM>().Property<short>(@"CategoryId").HasColumnName(@"CategoryId").HasColumnType(@"smallint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AGROITEM>().HasKey(@"Id");
        }

        partial void CustomizeAGROITEMMapping(ModelBuilder modelBuilder);

        #endregion

        #region BUYERADDSDIFFERENTADSTOFAV Mapping

        private void BUYERADDSDIFFERENTADSTOFAVMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BUYERADDSDIFFERENTADSTOFAV>().ToTable(@"BUYER_ADDS_DIFFERENT_ADS_TO_FAV", @"dbo");
            modelBuilder.Entity<BUYERADDSDIFFERENTADSTOFAV>().Property<long>(@"BuyerId").HasColumnName(@"BuyerId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<BUYERADDSDIFFERENTADSTOFAV>().Property<long>(@"AdId").HasColumnName(@"AdId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<BUYERADDSDIFFERENTADSTOFAV>().HasKey(@"BuyerId", @"AdId");
        }

        partial void CustomizeBUYERADDSDIFFERENTADSTOFAVMapping(ModelBuilder modelBuilder);

        #endregion

        #region BUYERSADDAGROITEMTOINTEREST Mapping

        private void BUYERSADDAGROITEMTOINTERESTMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BUYERSADDAGROITEMTOINTEREST>().ToTable(@"BUYERS_ADD_AGRO_ITEM_TO_INTEREST", @"dbo");
            modelBuilder.Entity<BUYERSADDAGROITEMTOINTEREST>().Property<long>(@"BuyerId").HasColumnName(@"BuyerId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<BUYERSADDAGROITEMTOINTEREST>().Property<int>(@"ItemId").HasColumnName(@"ItemId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<BUYERSADDAGROITEMTOINTEREST>().HasKey(@"BuyerId", @"ItemId");
        }

        partial void CustomizeBUYERSADDAGROITEMTOINTERESTMapping(ModelBuilder modelBuilder);

        #endregion

        #region CATEGORY Mapping

        private void CATEGORYMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CATEGORY>().ToTable(@"CATEGORIES", @"dbo");
            modelBuilder.Entity<CATEGORY>().Property<short>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"smallint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CATEGORY>().Property<string>(x => x.Name).HasColumnName(@"Name").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CATEGORY>().Property<string>(x => x.UName).HasColumnName(@"UName").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CATEGORY>().HasKey(@"Id");
        }

        partial void CustomizeCATEGORYMapping(ModelBuilder modelBuilder);

        #endregion

        #region CITY Mapping

        private void CITYMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CITY>().ToTable(@"CITIES", @"dbo");
            modelBuilder.Entity<CITY>().Property<short>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"smallint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CITY>().Property<string>(x => x.Name).HasColumnName(@"Name").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CITY>().Property<decimal>(x => x.GLat).HasColumnName(@"GLat").HasColumnType(@"decimal(10,8)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CITY>().Property<decimal>(x => x.GLng).HasColumnName(@"GLng").HasColumnType(@"decimal(11,8)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CITY>().HasKey(@"Id");
            modelBuilder.Entity<CITY>().HasIndex(@"Id").IsUnique(true);
        }

        partial void CustomizeCITYMapping(ModelBuilder modelBuilder);

        #endregion

        #region SELLERSFAVORITESBUYER Mapping

        private void SELLERSFAVORITESBUYERMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SELLERSFAVORITESBUYER>().ToTable(@"SELLERS_FAVORITES_BUYERS", @"dbo");
            modelBuilder.Entity<SELLERSFAVORITESBUYER>().Property<long>(@"SellerId").HasColumnName(@"SellerId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<SELLERSFAVORITESBUYER>().Property<long>(@"BuyerId").HasColumnName(@"BuyerId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<SELLERSFAVORITESBUYER>().HasKey(@"SellerId", @"BuyerId");
        }

        partial void CustomizeSELLERSFAVORITESBUYERMapping(ModelBuilder modelBuilder);

        #endregion

        #region USER Mapping

        private void USERMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<USER>().ToTable(@"USERS", @"dbo");
            modelBuilder.Entity<USER>().Property<long>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<USER>().Property<string>(x => x.FName).HasColumnName(@"FName").HasColumnType(@"varchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<USER>().Property<string>(x => x.LName).HasColumnName(@"LName").HasColumnType(@"varchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<USER>().Property<string>(x => x.CCompanyCode).HasColumnName(@"CCompanyCode").HasColumnType(@"nchar(3)").IsRequired().ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<USER>().Property<string>(x => x.CCountryCode).HasColumnName(@"CCountryCode").HasColumnType(@"nchar(3)").IsRequired().ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<USER>().Property<string>(x => x.CPhone).HasColumnName(@"CPhone").HasColumnType(@"nchar(7)").IsRequired().ValueGeneratedNever().HasMaxLength(7);
            modelBuilder.Entity<USER>().Property<string>(x => x.Address).HasColumnName(@"Address").HasColumnType(@"varchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<USER>().Property<decimal?>(x => x.GLat).HasColumnName(@"GLat").HasColumnType(@"decimal(10,8)").ValueGeneratedNever();
            modelBuilder.Entity<USER>().Property<decimal?>(x => x.GLng).HasColumnName(@"GLng").HasColumnType(@"decimal(11,8)").ValueGeneratedNever();
            modelBuilder.Entity<USER>().Property<bool>(x => x.BuyerFlag).HasColumnName(@"BuyerFlag").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<USER>().Property<bool>(x => x.SellerFlag).HasColumnName(@"SellerFlag").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<USER>().Property<short>(@"CityId").HasColumnName(@"CityId").HasColumnType(@"smallint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<USER>().HasKey(@"Id");
            modelBuilder.Entity<USER>().HasIndex(@"CCompanyCode", @"CCountryCode", @"CPhone").IsUnique(true).HasName(@"UNIQUE_CONTACT");
        }

        partial void CustomizeUSERMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {

            modelBuilder.Entity<ADVERTISEMENT>().HasOne(x => x.City).WithMany(op => op.ADVERTISEMENTs_CityId).IsRequired(true).HasForeignKey(@"CityId");
            modelBuilder.Entity<ADVERTISEMENT>().HasOne(x => x.AgroItem).WithMany(op => op.ADVERTISEMENTs_ItemId).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"ItemId");
            modelBuilder.Entity<ADVERTISEMENT>().HasOne(x => x.Seller).WithMany(op => op.PostedAdvertisements).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"SellerId");
            modelBuilder.Entity<ADVERTISEMENT>().HasMany(x => x.BUYERADDSDIFFERENTADSTOFAVs_AdId).WithOne(op => op.ADVERTISEMENT).IsRequired(true).HasForeignKey(@"AdId");

            modelBuilder.Entity<AGROITEM>().HasMany(x => x.ADVERTISEMENTs_ItemId).WithOne(op => op.AgroItem).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"ItemId");
            modelBuilder.Entity<AGROITEM>().HasOne(x => x.CATEGORY).WithMany(op => op.AGROITEMS).IsRequired(true).HasForeignKey(@"CategoryId");
            modelBuilder.Entity<AGROITEM>().HasMany(x => x.BUYERSADDAGROITEMTOINTERESTs_ItemId).WithOne(op => op.AGROITEM).IsRequired(true).HasForeignKey(@"ItemId");

            modelBuilder.Entity<BUYERADDSDIFFERENTADSTOFAV>().HasOne(x => x.ADVERTISEMENT).WithMany(op => op.BUYERADDSDIFFERENTADSTOFAVs_AdId).IsRequired(true).HasForeignKey(@"AdId");
            modelBuilder.Entity<BUYERADDSDIFFERENTADSTOFAV>().HasOne(x => x.Buyer).WithMany(op => op.InterestedAdvertisements).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"BuyerId");

            modelBuilder.Entity<BUYERSADDAGROITEMTOINTEREST>().HasOne(x => x.AGROITEM).WithMany(op => op.BUYERSADDAGROITEMTOINTERESTs_ItemId).IsRequired(true).HasForeignKey(@"ItemId");
            modelBuilder.Entity<BUYERSADDAGROITEMTOINTEREST>().HasOne(x => x.User).WithMany(op => op.InterestedAgroItems).IsRequired(true).HasForeignKey(@"BuyerId");

            modelBuilder.Entity<CATEGORY>().HasMany(x => x.AGROITEMS).WithOne(op => op.CATEGORY).IsRequired(true).HasForeignKey(@"CategoryId");

            modelBuilder.Entity<CITY>().HasMany(x => x.ADVERTISEMENTs_CityId).WithOne(op => op.City).IsRequired(true).HasForeignKey(@"CityId");
            modelBuilder.Entity<CITY>().HasMany(x => x.Users).WithOne(op => op.City).IsRequired(true).HasForeignKey(@"CityId");

            modelBuilder.Entity<SELLERSFAVORITESBUYER>().HasOne(x => x.USER_SellerId).WithMany(op => op.FavoriteBuyers).IsRequired(true).HasForeignKey(@"SellerId");
            modelBuilder.Entity<SELLERSFAVORITESBUYER>().HasOne(x => x.USER_BuyerId).WithMany(op => op.FavoriteSellers).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"BuyerId");

            modelBuilder.Entity<USER>().HasMany(x => x.PostedAdvertisements).WithOne(op => op.Seller).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"SellerId");
            modelBuilder.Entity<USER>().HasMany(x => x.InterestedAdvertisements).WithOne(op => op.Buyer).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"BuyerId");
            modelBuilder.Entity<USER>().HasMany(x => x.InterestedAgroItems).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"BuyerId");
            modelBuilder.Entity<USER>().HasMany(x => x.FavoriteBuyers).WithOne(op => op.USER_SellerId).IsRequired(true).HasForeignKey(@"SellerId");
            modelBuilder.Entity<USER>().HasMany(x => x.FavoriteSellers).WithOne(op => op.USER_BuyerId).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"BuyerId");
            modelBuilder.Entity<USER>().HasOne(x => x.City).WithMany(op => op.Users).IsRequired(true).HasForeignKey(@"CityId");
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
